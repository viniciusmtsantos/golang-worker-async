// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: registrations_person.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PersonRPC_FindByFilter_FullMethodName                   = "/microservice.registrations.registrations_person.PersonRPC/FindByFilter"
	PersonRPC_FindByBenefit_FullMethodName                  = "/microservice.registrations.registrations_person.PersonRPC/FindByBenefit"
	PersonRPC_FindElderlyByCpf_FullMethodName               = "/microservice.registrations.registrations_person.PersonRPC/FindElderlyByCpf"
	PersonRPC_FetchElderlyByCpf_FullMethodName              = "/microservice.registrations.registrations_person.PersonRPC/FetchElderlyByCpf"
	PersonRPC_CreatePersonNotWebUser_FullMethodName         = "/microservice.registrations.registrations_person.PersonRPC/CreatePersonNotWebUser"
	PersonRPC_CreatePersonByBenefit_FullMethodName          = "/microservice.registrations.registrations_person.PersonRPC/CreatePersonByBenefit"
	PersonRPC_UpdatePersonByBenefit_FullMethodName          = "/microservice.registrations.registrations_person.PersonRPC/UpdatePersonByBenefit"
	PersonRPC_CreateRegistration_FullMethodName             = "/microservice.registrations.registrations_person.PersonRPC/CreateRegistration"
	PersonRPC_CreateFidelityRegister_FullMethodName         = "/microservice.registrations.registrations_person.PersonRPC/CreateFidelityRegister"
	PersonRPC_UpdateRegistration_FullMethodName             = "/microservice.registrations.registrations_person.PersonRPC/UpdateRegistration"
	PersonRPC_ConfirmLinkRequestRegistration_FullMethodName = "/microservice.registrations.registrations_person.PersonRPC/ConfirmLinkRequestRegistration"
	PersonRPC_ValidateUnification_FullMethodName            = "/microservice.registrations.registrations_person.PersonRPC/ValidateUnification"
	PersonRPC_LoginByEmailAndPwd_FullMethodName             = "/microservice.registrations.registrations_person.PersonRPC/LoginByEmailAndPwd"
	PersonRPC_CheckLoginExists_FullMethodName               = "/microservice.registrations.registrations_person.PersonRPC/CheckLoginExists"
	PersonRPC_RequestPasswordRecovery_FullMethodName        = "/microservice.registrations.registrations_person.PersonRPC/RequestPasswordRecovery"
	PersonRPC_RequestPasswordRecoverySSO_FullMethodName     = "/microservice.registrations.registrations_person.PersonRPC/RequestPasswordRecoverySSO"
	PersonRPC_ConfirmPasswordRecovery_FullMethodName        = "/microservice.registrations.registrations_person.PersonRPC/ConfirmPasswordRecovery"
	PersonRPC_RequestChangeEmail_FullMethodName             = "/microservice.registrations.registrations_person.PersonRPC/RequestChangeEmail"
	PersonRPC_ConfirmChangeEmail_FullMethodName             = "/microservice.registrations.registrations_person.PersonRPC/ConfirmChangeEmail"
	PersonRPC_ChangePassword_FullMethodName                 = "/microservice.registrations.registrations_person.PersonRPC/ChangePassword"
	PersonRPC_CreateYoungPersonByPersonID_FullMethodName    = "/microservice.registrations.registrations_person.PersonRPC/CreateYoungPersonByPersonID"
	PersonRPC_UpdateYoungPersonByPersonID_FullMethodName    = "/microservice.registrations.registrations_person.PersonRPC/UpdateYoungPersonByPersonID"
	PersonRPC_DeleteYoungPersonByPersonID_FullMethodName    = "/microservice.registrations.registrations_person.PersonRPC/DeleteYoungPersonByPersonID"
	PersonRPC_FetchYoungPerson_FullMethodName               = "/microservice.registrations.registrations_person.PersonRPC/FetchYoungPerson"
	PersonRPC_CreateYoungPerson_FullMethodName              = "/microservice.registrations.registrations_person.PersonRPC/CreateYoungPerson"
	PersonRPC_CreateElderlyPersonByPersonID_FullMethodName  = "/microservice.registrations.registrations_person.PersonRPC/CreateElderlyPersonByPersonID"
	PersonRPC_UpdateElderlyPersonByPersonID_FullMethodName  = "/microservice.registrations.registrations_person.PersonRPC/UpdateElderlyPersonByPersonID"
	PersonRPC_DeleteElderlyPersonByPersonID_FullMethodName  = "/microservice.registrations.registrations_person.PersonRPC/DeleteElderlyPersonByPersonID"
	PersonRPC_CreateElderlyPerson_FullMethodName            = "/microservice.registrations.registrations_person.PersonRPC/CreateElderlyPerson"
	PersonRPC_CreateStudentPersonByPersonID_FullMethodName  = "/microservice.registrations.registrations_person.PersonRPC/CreateStudentPersonByPersonID"
	PersonRPC_UpdateStudentPersonByPersonID_FullMethodName  = "/microservice.registrations.registrations_person.PersonRPC/UpdateStudentPersonByPersonID"
	PersonRPC_DeleteStudentPersonByPersonID_FullMethodName  = "/microservice.registrations.registrations_person.PersonRPC/DeleteStudentPersonByPersonID"
	PersonRPC_CreatePassPersonByPersonID_FullMethodName     = "/microservice.registrations.registrations_person.PersonRPC/CreatePassPersonByPersonID"
	PersonRPC_UpdatePassPersonByPersonID_FullMethodName     = "/microservice.registrations.registrations_person.PersonRPC/UpdatePassPersonByPersonID"
	PersonRPC_DeletePassPersonByPersonID_FullMethodName     = "/microservice.registrations.registrations_person.PersonRPC/DeletePassPersonByPersonID"
	PersonRPC_DeletePassPersonSectionalByID_FullMethodName  = "/microservice.registrations.registrations_person.PersonRPC/DeletePassPersonSectionalByID"
	PersonRPC_DeletePassPersonSituationByID_FullMethodName  = "/microservice.registrations.registrations_person.PersonRPC/DeletePassPersonSituationByID"
	PersonRPC_DeletePassPersonValidityByID_FullMethodName   = "/microservice.registrations.registrations_person.PersonRPC/DeletePassPersonValidityByID"
	PersonRPC_DeletePassPersonUfByID_FullMethodName         = "/microservice.registrations.registrations_person.PersonRPC/DeletePassPersonUfByID"
	PersonRPC_DeletePassPersonCategoryByID_FullMethodName   = "/microservice.registrations.registrations_person.PersonRPC/DeletePassPersonCategoryByID"
	PersonRPC_FetchPassPerson_FullMethodName                = "/microservice.registrations.registrations_person.PersonRPC/FetchPassPerson"
	PersonRPC_CreatePassPerson_FullMethodName               = "/microservice.registrations.registrations_person.PersonRPC/CreatePassPerson"
	PersonRPC_RefreshTokenSSO_FullMethodName                = "/microservice.registrations.registrations_person.PersonRPC/RefreshTokenSSO"
	PersonRPC_ValidatePersonSSO_FullMethodName              = "/microservice.registrations.registrations_person.PersonRPC/ValidatePersonSSO"
	PersonRPC_SaveUserResource_FullMethodName               = "/microservice.registrations.registrations_person.PersonRPC/SaveUserResource"
	PersonRPC_PersonHasResource_FullMethodName              = "/microservice.registrations.registrations_person.PersonRPC/PersonHasResource"
	PersonRPC_InsertPersonResourceSell_FullMethodName       = "/microservice.registrations.registrations_person.PersonRPC/InsertPersonResourceSell"
	PersonRPC_DeleteCheckCredits_FullMethodName             = "/microservice.registrations.registrations_person.PersonRPC/DeleteCheckCredits"
	PersonRPC_DeleteCheckTickets_FullMethodName             = "/microservice.registrations.registrations_person.PersonRPC/DeleteCheckTickets"
	PersonRPC_DeletePersonById_FullMethodName               = "/microservice.registrations.registrations_person.PersonRPC/DeletePersonById"
	PersonRPC_RequestPartnerPhysicalPerson_FullMethodName   = "/microservice.registrations.registrations_person.PersonRPC/RequestPartnerPhysicalPerson"
	PersonRPC_GetClaimsFromTokenBenefit_FullMethodName      = "/microservice.registrations.registrations_person.PersonRPC/GetClaimsFromTokenBenefit"
)

// PersonRPCClient is the client API for PersonRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonRPCClient interface {
	FindByFilter(ctx context.Context, in *FindByFilterRequest, opts ...grpc.CallOption) (*FindByFilterResponse, error)
	FindByBenefit(ctx context.Context, in *FindByFilterRequest, opts ...grpc.CallOption) (*FindByBenefitResponse, error)
	FindElderlyByCpf(ctx context.Context, in *PersonElderlyFilterRequest, opts ...grpc.CallOption) (*PersonElderlyResponse, error)
	FetchElderlyByCpf(ctx context.Context, in *PersonElderlyFilterRequest, opts ...grpc.CallOption) (*PersonElderlyResponse, error)
	CreatePersonNotWebUser(ctx context.Context, in *RegistrationPersonNotWebUser, opts ...grpc.CallOption) (*CreatedIDResponse, error)
	CreatePersonByBenefit(ctx context.Context, in *PersonByBenefit, opts ...grpc.CallOption) (*PersonByBenefit, error)
	UpdatePersonByBenefit(ctx context.Context, in *PersonByBenefit, opts ...grpc.CallOption) (*ResponseDefault, error)
	CreateRegistration(ctx context.Context, in *RequestRegistration, opts ...grpc.CallOption) (*RequestRegistrationResponse, error)
	CreateFidelityRegister(ctx context.Context, in *CreateFidelity, opts ...grpc.CallOption) (*ResponseDefault, error)
	UpdateRegistration(ctx context.Context, in *RequestRegistration, opts ...grpc.CallOption) (*RequestRegistrationResponse, error)
	ConfirmLinkRequestRegistration(ctx context.Context, in *ConfirmLinkRequest, opts ...grpc.CallOption) (*ConfirmLinkResponse, error)
	ValidateUnification(ctx context.Context, in *ValidateUnificationRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	LoginByEmailAndPwd(ctx context.Context, in *LoginPersonRequest, opts ...grpc.CallOption) (*Person, error)
	CheckLoginExists(ctx context.Context, in *CheckLoginExistsRequest, opts ...grpc.CallOption) (*CheckLoginExistsResponse, error)
	RequestPasswordRecovery(ctx context.Context, in *RequestRecoverPassword, opts ...grpc.CallOption) (*ResponseDefault, error)
	RequestPasswordRecoverySSO(ctx context.Context, in *RequestRecoverPassword, opts ...grpc.CallOption) (*RequestRecoverPasswordResponse, error)
	ConfirmPasswordRecovery(ctx context.Context, in *ConfirmRecoverPasswordRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	RequestChangeEmail(ctx context.Context, in *ChangeEmail, opts ...grpc.CallOption) (*ResponseDefault, error)
	ConfirmChangeEmail(ctx context.Context, in *ConfirmLinkRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	CreateYoungPersonByPersonID(ctx context.Context, in *PersonYoung, opts ...grpc.CallOption) (*CreatedIDResponse, error)
	UpdateYoungPersonByPersonID(ctx context.Context, in *PersonYoung, opts ...grpc.CallOption) (*ResponseDefault, error)
	DeleteYoungPersonByPersonID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	FetchYoungPerson(ctx context.Context, in *PersonYoung, opts ...grpc.CallOption) (*PersonYoungResponse, error)
	CreateYoungPerson(ctx context.Context, in *PersonYoung, opts ...grpc.CallOption) (*PersonYoung, error)
	CreateElderlyPersonByPersonID(ctx context.Context, in *PersonElderly, opts ...grpc.CallOption) (*CreatedIDResponse, error)
	UpdateElderlyPersonByPersonID(ctx context.Context, in *PersonElderly, opts ...grpc.CallOption) (*ResponseDefault, error)
	DeleteElderlyPersonByPersonID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	CreateElderlyPerson(ctx context.Context, in *PersonElderly, opts ...grpc.CallOption) (*PersonElderlyResponse, error)
	CreateStudentPersonByPersonID(ctx context.Context, in *PersonStudent, opts ...grpc.CallOption) (*CreatedIDResponse, error)
	UpdateStudentPersonByPersonID(ctx context.Context, in *PersonStudent, opts ...grpc.CallOption) (*ResponseDefault, error)
	DeleteStudentPersonByPersonID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	CreatePassPersonByPersonID(ctx context.Context, in *PersonPass, opts ...grpc.CallOption) (*CreatedIDResponse, error)
	UpdatePassPersonByPersonID(ctx context.Context, in *PersonPass, opts ...grpc.CallOption) (*ResponseDefault, error)
	DeletePassPersonByPersonID(ctx context.Context, in *DeletePersonPassRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	DeletePassPersonSectionalByID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	DeletePassPersonSituationByID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	DeletePassPersonValidityByID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	DeletePassPersonUfByID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	DeletePassPersonCategoryByID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
	FetchPassPerson(ctx context.Context, in *PersonPass, opts ...grpc.CallOption) (*PersonPassResponse, error)
	CreatePassPerson(ctx context.Context, in *PersonPass, opts ...grpc.CallOption) (*PersonPass, error)
	RefreshTokenSSO(ctx context.Context, in *RefreshTokenSSORequest, opts ...grpc.CallOption) (*RefreshTokenSSOResponse, error)
	ValidatePersonSSO(ctx context.Context, in *ValidatePersonSSORequest, opts ...grpc.CallOption) (*ValidatePersonSSOResponse, error)
	SaveUserResource(ctx context.Context, in *SaveUserResourceRequest, opts ...grpc.CallOption) (*SaveUserResourceResponse, error)
	PersonHasResource(ctx context.Context, in *PersonHasResourceRequest, opts ...grpc.CallOption) (*PersonHasResourceResponse, error)
	InsertPersonResourceSell(ctx context.Context, in *InsertPersonResourceSellRequest, opts ...grpc.CallOption) (*InsertPersonResourceSellResponse, error)
	DeleteCheckCredits(ctx context.Context, in *DeleteCheckCreditsRequest, opts ...grpc.CallOption) (*DeleteCheckCreditsResponse, error)
	DeleteCheckTickets(ctx context.Context, in *DeleteCheckTicketsRequest, opts ...grpc.CallOption) (*DeleteCheckTicketsResponse, error)
	DeletePersonById(ctx context.Context, in *DeletePersonRequest, opts ...grpc.CallOption) (*DeletePersonResponse, error)
	RequestPartnerPhysicalPerson(ctx context.Context, in *PartnerPhysicalPersonRequest, opts ...grpc.CallOption) (*Person, error)
	GetClaimsFromTokenBenefit(ctx context.Context, in *TokenBenefit, opts ...grpc.CallOption) (*ResponseClaimsFromTokenBenefit, error)
}

type personRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonRPCClient(cc grpc.ClientConnInterface) PersonRPCClient {
	return &personRPCClient{cc}
}

func (c *personRPCClient) FindByFilter(ctx context.Context, in *FindByFilterRequest, opts ...grpc.CallOption) (*FindByFilterResponse, error) {
	out := new(FindByFilterResponse)
	err := c.cc.Invoke(ctx, PersonRPC_FindByFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) FindByBenefit(ctx context.Context, in *FindByFilterRequest, opts ...grpc.CallOption) (*FindByBenefitResponse, error) {
	out := new(FindByBenefitResponse)
	err := c.cc.Invoke(ctx, PersonRPC_FindByBenefit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) FindElderlyByCpf(ctx context.Context, in *PersonElderlyFilterRequest, opts ...grpc.CallOption) (*PersonElderlyResponse, error) {
	out := new(PersonElderlyResponse)
	err := c.cc.Invoke(ctx, PersonRPC_FindElderlyByCpf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) FetchElderlyByCpf(ctx context.Context, in *PersonElderlyFilterRequest, opts ...grpc.CallOption) (*PersonElderlyResponse, error) {
	out := new(PersonElderlyResponse)
	err := c.cc.Invoke(ctx, PersonRPC_FetchElderlyByCpf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) CreatePersonNotWebUser(ctx context.Context, in *RegistrationPersonNotWebUser, opts ...grpc.CallOption) (*CreatedIDResponse, error) {
	out := new(CreatedIDResponse)
	err := c.cc.Invoke(ctx, PersonRPC_CreatePersonNotWebUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) CreatePersonByBenefit(ctx context.Context, in *PersonByBenefit, opts ...grpc.CallOption) (*PersonByBenefit, error) {
	out := new(PersonByBenefit)
	err := c.cc.Invoke(ctx, PersonRPC_CreatePersonByBenefit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) UpdatePersonByBenefit(ctx context.Context, in *PersonByBenefit, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_UpdatePersonByBenefit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) CreateRegistration(ctx context.Context, in *RequestRegistration, opts ...grpc.CallOption) (*RequestRegistrationResponse, error) {
	out := new(RequestRegistrationResponse)
	err := c.cc.Invoke(ctx, PersonRPC_CreateRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) CreateFidelityRegister(ctx context.Context, in *CreateFidelity, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_CreateFidelityRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) UpdateRegistration(ctx context.Context, in *RequestRegistration, opts ...grpc.CallOption) (*RequestRegistrationResponse, error) {
	out := new(RequestRegistrationResponse)
	err := c.cc.Invoke(ctx, PersonRPC_UpdateRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) ConfirmLinkRequestRegistration(ctx context.Context, in *ConfirmLinkRequest, opts ...grpc.CallOption) (*ConfirmLinkResponse, error) {
	out := new(ConfirmLinkResponse)
	err := c.cc.Invoke(ctx, PersonRPC_ConfirmLinkRequestRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) ValidateUnification(ctx context.Context, in *ValidateUnificationRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_ValidateUnification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) LoginByEmailAndPwd(ctx context.Context, in *LoginPersonRequest, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, PersonRPC_LoginByEmailAndPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) CheckLoginExists(ctx context.Context, in *CheckLoginExistsRequest, opts ...grpc.CallOption) (*CheckLoginExistsResponse, error) {
	out := new(CheckLoginExistsResponse)
	err := c.cc.Invoke(ctx, PersonRPC_CheckLoginExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) RequestPasswordRecovery(ctx context.Context, in *RequestRecoverPassword, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_RequestPasswordRecovery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) RequestPasswordRecoverySSO(ctx context.Context, in *RequestRecoverPassword, opts ...grpc.CallOption) (*RequestRecoverPasswordResponse, error) {
	out := new(RequestRecoverPasswordResponse)
	err := c.cc.Invoke(ctx, PersonRPC_RequestPasswordRecoverySSO_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) ConfirmPasswordRecovery(ctx context.Context, in *ConfirmRecoverPasswordRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_ConfirmPasswordRecovery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) RequestChangeEmail(ctx context.Context, in *ChangeEmail, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_RequestChangeEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) ConfirmChangeEmail(ctx context.Context, in *ConfirmLinkRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_ConfirmChangeEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) CreateYoungPersonByPersonID(ctx context.Context, in *PersonYoung, opts ...grpc.CallOption) (*CreatedIDResponse, error) {
	out := new(CreatedIDResponse)
	err := c.cc.Invoke(ctx, PersonRPC_CreateYoungPersonByPersonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) UpdateYoungPersonByPersonID(ctx context.Context, in *PersonYoung, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_UpdateYoungPersonByPersonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) DeleteYoungPersonByPersonID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_DeleteYoungPersonByPersonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) FetchYoungPerson(ctx context.Context, in *PersonYoung, opts ...grpc.CallOption) (*PersonYoungResponse, error) {
	out := new(PersonYoungResponse)
	err := c.cc.Invoke(ctx, PersonRPC_FetchYoungPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) CreateYoungPerson(ctx context.Context, in *PersonYoung, opts ...grpc.CallOption) (*PersonYoung, error) {
	out := new(PersonYoung)
	err := c.cc.Invoke(ctx, PersonRPC_CreateYoungPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) CreateElderlyPersonByPersonID(ctx context.Context, in *PersonElderly, opts ...grpc.CallOption) (*CreatedIDResponse, error) {
	out := new(CreatedIDResponse)
	err := c.cc.Invoke(ctx, PersonRPC_CreateElderlyPersonByPersonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) UpdateElderlyPersonByPersonID(ctx context.Context, in *PersonElderly, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_UpdateElderlyPersonByPersonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) DeleteElderlyPersonByPersonID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_DeleteElderlyPersonByPersonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) CreateElderlyPerson(ctx context.Context, in *PersonElderly, opts ...grpc.CallOption) (*PersonElderlyResponse, error) {
	out := new(PersonElderlyResponse)
	err := c.cc.Invoke(ctx, PersonRPC_CreateElderlyPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) CreateStudentPersonByPersonID(ctx context.Context, in *PersonStudent, opts ...grpc.CallOption) (*CreatedIDResponse, error) {
	out := new(CreatedIDResponse)
	err := c.cc.Invoke(ctx, PersonRPC_CreateStudentPersonByPersonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) UpdateStudentPersonByPersonID(ctx context.Context, in *PersonStudent, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_UpdateStudentPersonByPersonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) DeleteStudentPersonByPersonID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_DeleteStudentPersonByPersonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) CreatePassPersonByPersonID(ctx context.Context, in *PersonPass, opts ...grpc.CallOption) (*CreatedIDResponse, error) {
	out := new(CreatedIDResponse)
	err := c.cc.Invoke(ctx, PersonRPC_CreatePassPersonByPersonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) UpdatePassPersonByPersonID(ctx context.Context, in *PersonPass, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_UpdatePassPersonByPersonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) DeletePassPersonByPersonID(ctx context.Context, in *DeletePersonPassRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_DeletePassPersonByPersonID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) DeletePassPersonSectionalByID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_DeletePassPersonSectionalByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) DeletePassPersonSituationByID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_DeletePassPersonSituationByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) DeletePassPersonValidityByID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_DeletePassPersonValidityByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) DeletePassPersonUfByID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_DeletePassPersonUfByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) DeletePassPersonCategoryByID(ctx context.Context, in *DeleteIDRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, PersonRPC_DeletePassPersonCategoryByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) FetchPassPerson(ctx context.Context, in *PersonPass, opts ...grpc.CallOption) (*PersonPassResponse, error) {
	out := new(PersonPassResponse)
	err := c.cc.Invoke(ctx, PersonRPC_FetchPassPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) CreatePassPerson(ctx context.Context, in *PersonPass, opts ...grpc.CallOption) (*PersonPass, error) {
	out := new(PersonPass)
	err := c.cc.Invoke(ctx, PersonRPC_CreatePassPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) RefreshTokenSSO(ctx context.Context, in *RefreshTokenSSORequest, opts ...grpc.CallOption) (*RefreshTokenSSOResponse, error) {
	out := new(RefreshTokenSSOResponse)
	err := c.cc.Invoke(ctx, PersonRPC_RefreshTokenSSO_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) ValidatePersonSSO(ctx context.Context, in *ValidatePersonSSORequest, opts ...grpc.CallOption) (*ValidatePersonSSOResponse, error) {
	out := new(ValidatePersonSSOResponse)
	err := c.cc.Invoke(ctx, PersonRPC_ValidatePersonSSO_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) SaveUserResource(ctx context.Context, in *SaveUserResourceRequest, opts ...grpc.CallOption) (*SaveUserResourceResponse, error) {
	out := new(SaveUserResourceResponse)
	err := c.cc.Invoke(ctx, PersonRPC_SaveUserResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) PersonHasResource(ctx context.Context, in *PersonHasResourceRequest, opts ...grpc.CallOption) (*PersonHasResourceResponse, error) {
	out := new(PersonHasResourceResponse)
	err := c.cc.Invoke(ctx, PersonRPC_PersonHasResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) InsertPersonResourceSell(ctx context.Context, in *InsertPersonResourceSellRequest, opts ...grpc.CallOption) (*InsertPersonResourceSellResponse, error) {
	out := new(InsertPersonResourceSellResponse)
	err := c.cc.Invoke(ctx, PersonRPC_InsertPersonResourceSell_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) DeleteCheckCredits(ctx context.Context, in *DeleteCheckCreditsRequest, opts ...grpc.CallOption) (*DeleteCheckCreditsResponse, error) {
	out := new(DeleteCheckCreditsResponse)
	err := c.cc.Invoke(ctx, PersonRPC_DeleteCheckCredits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) DeleteCheckTickets(ctx context.Context, in *DeleteCheckTicketsRequest, opts ...grpc.CallOption) (*DeleteCheckTicketsResponse, error) {
	out := new(DeleteCheckTicketsResponse)
	err := c.cc.Invoke(ctx, PersonRPC_DeleteCheckTickets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) DeletePersonById(ctx context.Context, in *DeletePersonRequest, opts ...grpc.CallOption) (*DeletePersonResponse, error) {
	out := new(DeletePersonResponse)
	err := c.cc.Invoke(ctx, PersonRPC_DeletePersonById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) RequestPartnerPhysicalPerson(ctx context.Context, in *PartnerPhysicalPersonRequest, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, PersonRPC_RequestPartnerPhysicalPerson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personRPCClient) GetClaimsFromTokenBenefit(ctx context.Context, in *TokenBenefit, opts ...grpc.CallOption) (*ResponseClaimsFromTokenBenefit, error) {
	out := new(ResponseClaimsFromTokenBenefit)
	err := c.cc.Invoke(ctx, PersonRPC_GetClaimsFromTokenBenefit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonRPCServer is the server API for PersonRPC service.
// All implementations must embed UnimplementedPersonRPCServer
// for forward compatibility
type PersonRPCServer interface {
	FindByFilter(context.Context, *FindByFilterRequest) (*FindByFilterResponse, error)
	FindByBenefit(context.Context, *FindByFilterRequest) (*FindByBenefitResponse, error)
	FindElderlyByCpf(context.Context, *PersonElderlyFilterRequest) (*PersonElderlyResponse, error)
	FetchElderlyByCpf(context.Context, *PersonElderlyFilterRequest) (*PersonElderlyResponse, error)
	CreatePersonNotWebUser(context.Context, *RegistrationPersonNotWebUser) (*CreatedIDResponse, error)
	CreatePersonByBenefit(context.Context, *PersonByBenefit) (*PersonByBenefit, error)
	UpdatePersonByBenefit(context.Context, *PersonByBenefit) (*ResponseDefault, error)
	CreateRegistration(context.Context, *RequestRegistration) (*RequestRegistrationResponse, error)
	CreateFidelityRegister(context.Context, *CreateFidelity) (*ResponseDefault, error)
	UpdateRegistration(context.Context, *RequestRegistration) (*RequestRegistrationResponse, error)
	ConfirmLinkRequestRegistration(context.Context, *ConfirmLinkRequest) (*ConfirmLinkResponse, error)
	ValidateUnification(context.Context, *ValidateUnificationRequest) (*ResponseDefault, error)
	LoginByEmailAndPwd(context.Context, *LoginPersonRequest) (*Person, error)
	CheckLoginExists(context.Context, *CheckLoginExistsRequest) (*CheckLoginExistsResponse, error)
	RequestPasswordRecovery(context.Context, *RequestRecoverPassword) (*ResponseDefault, error)
	RequestPasswordRecoverySSO(context.Context, *RequestRecoverPassword) (*RequestRecoverPasswordResponse, error)
	ConfirmPasswordRecovery(context.Context, *ConfirmRecoverPasswordRequest) (*ResponseDefault, error)
	RequestChangeEmail(context.Context, *ChangeEmail) (*ResponseDefault, error)
	ConfirmChangeEmail(context.Context, *ConfirmLinkRequest) (*ResponseDefault, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ResponseDefault, error)
	CreateYoungPersonByPersonID(context.Context, *PersonYoung) (*CreatedIDResponse, error)
	UpdateYoungPersonByPersonID(context.Context, *PersonYoung) (*ResponseDefault, error)
	DeleteYoungPersonByPersonID(context.Context, *DeleteIDRequest) (*ResponseDefault, error)
	FetchYoungPerson(context.Context, *PersonYoung) (*PersonYoungResponse, error)
	CreateYoungPerson(context.Context, *PersonYoung) (*PersonYoung, error)
	CreateElderlyPersonByPersonID(context.Context, *PersonElderly) (*CreatedIDResponse, error)
	UpdateElderlyPersonByPersonID(context.Context, *PersonElderly) (*ResponseDefault, error)
	DeleteElderlyPersonByPersonID(context.Context, *DeleteIDRequest) (*ResponseDefault, error)
	CreateElderlyPerson(context.Context, *PersonElderly) (*PersonElderlyResponse, error)
	CreateStudentPersonByPersonID(context.Context, *PersonStudent) (*CreatedIDResponse, error)
	UpdateStudentPersonByPersonID(context.Context, *PersonStudent) (*ResponseDefault, error)
	DeleteStudentPersonByPersonID(context.Context, *DeleteIDRequest) (*ResponseDefault, error)
	CreatePassPersonByPersonID(context.Context, *PersonPass) (*CreatedIDResponse, error)
	UpdatePassPersonByPersonID(context.Context, *PersonPass) (*ResponseDefault, error)
	DeletePassPersonByPersonID(context.Context, *DeletePersonPassRequest) (*ResponseDefault, error)
	DeletePassPersonSectionalByID(context.Context, *DeleteIDRequest) (*ResponseDefault, error)
	DeletePassPersonSituationByID(context.Context, *DeleteIDRequest) (*ResponseDefault, error)
	DeletePassPersonValidityByID(context.Context, *DeleteIDRequest) (*ResponseDefault, error)
	DeletePassPersonUfByID(context.Context, *DeleteIDRequest) (*ResponseDefault, error)
	DeletePassPersonCategoryByID(context.Context, *DeleteIDRequest) (*ResponseDefault, error)
	FetchPassPerson(context.Context, *PersonPass) (*PersonPassResponse, error)
	CreatePassPerson(context.Context, *PersonPass) (*PersonPass, error)
	RefreshTokenSSO(context.Context, *RefreshTokenSSORequest) (*RefreshTokenSSOResponse, error)
	ValidatePersonSSO(context.Context, *ValidatePersonSSORequest) (*ValidatePersonSSOResponse, error)
	SaveUserResource(context.Context, *SaveUserResourceRequest) (*SaveUserResourceResponse, error)
	PersonHasResource(context.Context, *PersonHasResourceRequest) (*PersonHasResourceResponse, error)
	InsertPersonResourceSell(context.Context, *InsertPersonResourceSellRequest) (*InsertPersonResourceSellResponse, error)
	DeleteCheckCredits(context.Context, *DeleteCheckCreditsRequest) (*DeleteCheckCreditsResponse, error)
	DeleteCheckTickets(context.Context, *DeleteCheckTicketsRequest) (*DeleteCheckTicketsResponse, error)
	DeletePersonById(context.Context, *DeletePersonRequest) (*DeletePersonResponse, error)
	RequestPartnerPhysicalPerson(context.Context, *PartnerPhysicalPersonRequest) (*Person, error)
	GetClaimsFromTokenBenefit(context.Context, *TokenBenefit) (*ResponseClaimsFromTokenBenefit, error)
	mustEmbedUnimplementedPersonRPCServer()
}

// UnimplementedPersonRPCServer must be embedded to have forward compatible implementations.
type UnimplementedPersonRPCServer struct {
}

func (UnimplementedPersonRPCServer) FindByFilter(context.Context, *FindByFilterRequest) (*FindByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByFilter not implemented")
}
func (UnimplementedPersonRPCServer) FindByBenefit(context.Context, *FindByFilterRequest) (*FindByBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByBenefit not implemented")
}
func (UnimplementedPersonRPCServer) FindElderlyByCpf(context.Context, *PersonElderlyFilterRequest) (*PersonElderlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindElderlyByCpf not implemented")
}
func (UnimplementedPersonRPCServer) FetchElderlyByCpf(context.Context, *PersonElderlyFilterRequest) (*PersonElderlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchElderlyByCpf not implemented")
}
func (UnimplementedPersonRPCServer) CreatePersonNotWebUser(context.Context, *RegistrationPersonNotWebUser) (*CreatedIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersonNotWebUser not implemented")
}
func (UnimplementedPersonRPCServer) CreatePersonByBenefit(context.Context, *PersonByBenefit) (*PersonByBenefit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersonByBenefit not implemented")
}
func (UnimplementedPersonRPCServer) UpdatePersonByBenefit(context.Context, *PersonByBenefit) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonByBenefit not implemented")
}
func (UnimplementedPersonRPCServer) CreateRegistration(context.Context, *RequestRegistration) (*RequestRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistration not implemented")
}
func (UnimplementedPersonRPCServer) CreateFidelityRegister(context.Context, *CreateFidelity) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFidelityRegister not implemented")
}
func (UnimplementedPersonRPCServer) UpdateRegistration(context.Context, *RequestRegistration) (*RequestRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistration not implemented")
}
func (UnimplementedPersonRPCServer) ConfirmLinkRequestRegistration(context.Context, *ConfirmLinkRequest) (*ConfirmLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmLinkRequestRegistration not implemented")
}
func (UnimplementedPersonRPCServer) ValidateUnification(context.Context, *ValidateUnificationRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUnification not implemented")
}
func (UnimplementedPersonRPCServer) LoginByEmailAndPwd(context.Context, *LoginPersonRequest) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByEmailAndPwd not implemented")
}
func (UnimplementedPersonRPCServer) CheckLoginExists(context.Context, *CheckLoginExistsRequest) (*CheckLoginExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoginExists not implemented")
}
func (UnimplementedPersonRPCServer) RequestPasswordRecovery(context.Context, *RequestRecoverPassword) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordRecovery not implemented")
}
func (UnimplementedPersonRPCServer) RequestPasswordRecoverySSO(context.Context, *RequestRecoverPassword) (*RequestRecoverPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordRecoverySSO not implemented")
}
func (UnimplementedPersonRPCServer) ConfirmPasswordRecovery(context.Context, *ConfirmRecoverPasswordRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPasswordRecovery not implemented")
}
func (UnimplementedPersonRPCServer) RequestChangeEmail(context.Context, *ChangeEmail) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChangeEmail not implemented")
}
func (UnimplementedPersonRPCServer) ConfirmChangeEmail(context.Context, *ConfirmLinkRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmChangeEmail not implemented")
}
func (UnimplementedPersonRPCServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedPersonRPCServer) CreateYoungPersonByPersonID(context.Context, *PersonYoung) (*CreatedIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateYoungPersonByPersonID not implemented")
}
func (UnimplementedPersonRPCServer) UpdateYoungPersonByPersonID(context.Context, *PersonYoung) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateYoungPersonByPersonID not implemented")
}
func (UnimplementedPersonRPCServer) DeleteYoungPersonByPersonID(context.Context, *DeleteIDRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteYoungPersonByPersonID not implemented")
}
func (UnimplementedPersonRPCServer) FetchYoungPerson(context.Context, *PersonYoung) (*PersonYoungResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchYoungPerson not implemented")
}
func (UnimplementedPersonRPCServer) CreateYoungPerson(context.Context, *PersonYoung) (*PersonYoung, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateYoungPerson not implemented")
}
func (UnimplementedPersonRPCServer) CreateElderlyPersonByPersonID(context.Context, *PersonElderly) (*CreatedIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateElderlyPersonByPersonID not implemented")
}
func (UnimplementedPersonRPCServer) UpdateElderlyPersonByPersonID(context.Context, *PersonElderly) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateElderlyPersonByPersonID not implemented")
}
func (UnimplementedPersonRPCServer) DeleteElderlyPersonByPersonID(context.Context, *DeleteIDRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteElderlyPersonByPersonID not implemented")
}
func (UnimplementedPersonRPCServer) CreateElderlyPerson(context.Context, *PersonElderly) (*PersonElderlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateElderlyPerson not implemented")
}
func (UnimplementedPersonRPCServer) CreateStudentPersonByPersonID(context.Context, *PersonStudent) (*CreatedIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudentPersonByPersonID not implemented")
}
func (UnimplementedPersonRPCServer) UpdateStudentPersonByPersonID(context.Context, *PersonStudent) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudentPersonByPersonID not implemented")
}
func (UnimplementedPersonRPCServer) DeleteStudentPersonByPersonID(context.Context, *DeleteIDRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudentPersonByPersonID not implemented")
}
func (UnimplementedPersonRPCServer) CreatePassPersonByPersonID(context.Context, *PersonPass) (*CreatedIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePassPersonByPersonID not implemented")
}
func (UnimplementedPersonRPCServer) UpdatePassPersonByPersonID(context.Context, *PersonPass) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassPersonByPersonID not implemented")
}
func (UnimplementedPersonRPCServer) DeletePassPersonByPersonID(context.Context, *DeletePersonPassRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassPersonByPersonID not implemented")
}
func (UnimplementedPersonRPCServer) DeletePassPersonSectionalByID(context.Context, *DeleteIDRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassPersonSectionalByID not implemented")
}
func (UnimplementedPersonRPCServer) DeletePassPersonSituationByID(context.Context, *DeleteIDRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassPersonSituationByID not implemented")
}
func (UnimplementedPersonRPCServer) DeletePassPersonValidityByID(context.Context, *DeleteIDRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassPersonValidityByID not implemented")
}
func (UnimplementedPersonRPCServer) DeletePassPersonUfByID(context.Context, *DeleteIDRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassPersonUfByID not implemented")
}
func (UnimplementedPersonRPCServer) DeletePassPersonCategoryByID(context.Context, *DeleteIDRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassPersonCategoryByID not implemented")
}
func (UnimplementedPersonRPCServer) FetchPassPerson(context.Context, *PersonPass) (*PersonPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPassPerson not implemented")
}
func (UnimplementedPersonRPCServer) CreatePassPerson(context.Context, *PersonPass) (*PersonPass, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePassPerson not implemented")
}
func (UnimplementedPersonRPCServer) RefreshTokenSSO(context.Context, *RefreshTokenSSORequest) (*RefreshTokenSSOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenSSO not implemented")
}
func (UnimplementedPersonRPCServer) ValidatePersonSSO(context.Context, *ValidatePersonSSORequest) (*ValidatePersonSSOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePersonSSO not implemented")
}
func (UnimplementedPersonRPCServer) SaveUserResource(context.Context, *SaveUserResourceRequest) (*SaveUserResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserResource not implemented")
}
func (UnimplementedPersonRPCServer) PersonHasResource(context.Context, *PersonHasResourceRequest) (*PersonHasResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonHasResource not implemented")
}
func (UnimplementedPersonRPCServer) InsertPersonResourceSell(context.Context, *InsertPersonResourceSellRequest) (*InsertPersonResourceSellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertPersonResourceSell not implemented")
}
func (UnimplementedPersonRPCServer) DeleteCheckCredits(context.Context, *DeleteCheckCreditsRequest) (*DeleteCheckCreditsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheckCredits not implemented")
}
func (UnimplementedPersonRPCServer) DeleteCheckTickets(context.Context, *DeleteCheckTicketsRequest) (*DeleteCheckTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheckTickets not implemented")
}
func (UnimplementedPersonRPCServer) DeletePersonById(context.Context, *DeletePersonRequest) (*DeletePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersonById not implemented")
}
func (UnimplementedPersonRPCServer) RequestPartnerPhysicalPerson(context.Context, *PartnerPhysicalPersonRequest) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPartnerPhysicalPerson not implemented")
}
func (UnimplementedPersonRPCServer) GetClaimsFromTokenBenefit(context.Context, *TokenBenefit) (*ResponseClaimsFromTokenBenefit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaimsFromTokenBenefit not implemented")
}
func (UnimplementedPersonRPCServer) mustEmbedUnimplementedPersonRPCServer() {}

// UnsafePersonRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonRPCServer will
// result in compilation errors.
type UnsafePersonRPCServer interface {
	mustEmbedUnimplementedPersonRPCServer()
}

func RegisterPersonRPCServer(s grpc.ServiceRegistrar, srv PersonRPCServer) {
	s.RegisterService(&PersonRPC_ServiceDesc, srv)
}

func _PersonRPC_FindByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).FindByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_FindByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).FindByFilter(ctx, req.(*FindByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_FindByBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).FindByBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_FindByBenefit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).FindByBenefit(ctx, req.(*FindByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_FindElderlyByCpf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonElderlyFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).FindElderlyByCpf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_FindElderlyByCpf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).FindElderlyByCpf(ctx, req.(*PersonElderlyFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_FetchElderlyByCpf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonElderlyFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).FetchElderlyByCpf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_FetchElderlyByCpf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).FetchElderlyByCpf(ctx, req.(*PersonElderlyFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_CreatePersonNotWebUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationPersonNotWebUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).CreatePersonNotWebUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_CreatePersonNotWebUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).CreatePersonNotWebUser(ctx, req.(*RegistrationPersonNotWebUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_CreatePersonByBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonByBenefit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).CreatePersonByBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_CreatePersonByBenefit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).CreatePersonByBenefit(ctx, req.(*PersonByBenefit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_UpdatePersonByBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonByBenefit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).UpdatePersonByBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_UpdatePersonByBenefit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).UpdatePersonByBenefit(ctx, req.(*PersonByBenefit))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_CreateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).CreateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_CreateRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).CreateRegistration(ctx, req.(*RequestRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_CreateFidelityRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFidelity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).CreateFidelityRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_CreateFidelityRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).CreateFidelityRegister(ctx, req.(*CreateFidelity))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_UpdateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).UpdateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_UpdateRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).UpdateRegistration(ctx, req.(*RequestRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_ConfirmLinkRequestRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).ConfirmLinkRequestRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_ConfirmLinkRequestRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).ConfirmLinkRequestRegistration(ctx, req.(*ConfirmLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_ValidateUnification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUnificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).ValidateUnification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_ValidateUnification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).ValidateUnification(ctx, req.(*ValidateUnificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_LoginByEmailAndPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).LoginByEmailAndPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_LoginByEmailAndPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).LoginByEmailAndPwd(ctx, req.(*LoginPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_CheckLoginExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLoginExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).CheckLoginExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_CheckLoginExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).CheckLoginExists(ctx, req.(*CheckLoginExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_RequestPasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRecoverPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).RequestPasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_RequestPasswordRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).RequestPasswordRecovery(ctx, req.(*RequestRecoverPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_RequestPasswordRecoverySSO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRecoverPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).RequestPasswordRecoverySSO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_RequestPasswordRecoverySSO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).RequestPasswordRecoverySSO(ctx, req.(*RequestRecoverPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_ConfirmPasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRecoverPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).ConfirmPasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_ConfirmPasswordRecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).ConfirmPasswordRecovery(ctx, req.(*ConfirmRecoverPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_RequestChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).RequestChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_RequestChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).RequestChangeEmail(ctx, req.(*ChangeEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_ConfirmChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).ConfirmChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_ConfirmChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).ConfirmChangeEmail(ctx, req.(*ConfirmLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_CreateYoungPersonByPersonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonYoung)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).CreateYoungPersonByPersonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_CreateYoungPersonByPersonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).CreateYoungPersonByPersonID(ctx, req.(*PersonYoung))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_UpdateYoungPersonByPersonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonYoung)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).UpdateYoungPersonByPersonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_UpdateYoungPersonByPersonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).UpdateYoungPersonByPersonID(ctx, req.(*PersonYoung))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_DeleteYoungPersonByPersonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).DeleteYoungPersonByPersonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_DeleteYoungPersonByPersonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).DeleteYoungPersonByPersonID(ctx, req.(*DeleteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_FetchYoungPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonYoung)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).FetchYoungPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_FetchYoungPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).FetchYoungPerson(ctx, req.(*PersonYoung))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_CreateYoungPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonYoung)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).CreateYoungPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_CreateYoungPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).CreateYoungPerson(ctx, req.(*PersonYoung))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_CreateElderlyPersonByPersonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonElderly)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).CreateElderlyPersonByPersonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_CreateElderlyPersonByPersonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).CreateElderlyPersonByPersonID(ctx, req.(*PersonElderly))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_UpdateElderlyPersonByPersonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonElderly)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).UpdateElderlyPersonByPersonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_UpdateElderlyPersonByPersonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).UpdateElderlyPersonByPersonID(ctx, req.(*PersonElderly))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_DeleteElderlyPersonByPersonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).DeleteElderlyPersonByPersonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_DeleteElderlyPersonByPersonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).DeleteElderlyPersonByPersonID(ctx, req.(*DeleteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_CreateElderlyPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonElderly)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).CreateElderlyPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_CreateElderlyPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).CreateElderlyPerson(ctx, req.(*PersonElderly))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_CreateStudentPersonByPersonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).CreateStudentPersonByPersonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_CreateStudentPersonByPersonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).CreateStudentPersonByPersonID(ctx, req.(*PersonStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_UpdateStudentPersonByPersonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).UpdateStudentPersonByPersonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_UpdateStudentPersonByPersonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).UpdateStudentPersonByPersonID(ctx, req.(*PersonStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_DeleteStudentPersonByPersonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).DeleteStudentPersonByPersonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_DeleteStudentPersonByPersonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).DeleteStudentPersonByPersonID(ctx, req.(*DeleteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_CreatePassPersonByPersonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonPass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).CreatePassPersonByPersonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_CreatePassPersonByPersonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).CreatePassPersonByPersonID(ctx, req.(*PersonPass))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_UpdatePassPersonByPersonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonPass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).UpdatePassPersonByPersonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_UpdatePassPersonByPersonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).UpdatePassPersonByPersonID(ctx, req.(*PersonPass))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_DeletePassPersonByPersonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).DeletePassPersonByPersonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_DeletePassPersonByPersonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).DeletePassPersonByPersonID(ctx, req.(*DeletePersonPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_DeletePassPersonSectionalByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).DeletePassPersonSectionalByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_DeletePassPersonSectionalByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).DeletePassPersonSectionalByID(ctx, req.(*DeleteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_DeletePassPersonSituationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).DeletePassPersonSituationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_DeletePassPersonSituationByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).DeletePassPersonSituationByID(ctx, req.(*DeleteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_DeletePassPersonValidityByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).DeletePassPersonValidityByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_DeletePassPersonValidityByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).DeletePassPersonValidityByID(ctx, req.(*DeleteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_DeletePassPersonUfByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).DeletePassPersonUfByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_DeletePassPersonUfByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).DeletePassPersonUfByID(ctx, req.(*DeleteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_DeletePassPersonCategoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).DeletePassPersonCategoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_DeletePassPersonCategoryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).DeletePassPersonCategoryByID(ctx, req.(*DeleteIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_FetchPassPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonPass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).FetchPassPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_FetchPassPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).FetchPassPerson(ctx, req.(*PersonPass))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_CreatePassPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonPass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).CreatePassPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_CreatePassPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).CreatePassPerson(ctx, req.(*PersonPass))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_RefreshTokenSSO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenSSORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).RefreshTokenSSO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_RefreshTokenSSO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).RefreshTokenSSO(ctx, req.(*RefreshTokenSSORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_ValidatePersonSSO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePersonSSORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).ValidatePersonSSO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_ValidatePersonSSO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).ValidatePersonSSO(ctx, req.(*ValidatePersonSSORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_SaveUserResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).SaveUserResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_SaveUserResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).SaveUserResource(ctx, req.(*SaveUserResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_PersonHasResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonHasResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).PersonHasResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_PersonHasResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).PersonHasResource(ctx, req.(*PersonHasResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_InsertPersonResourceSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertPersonResourceSellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).InsertPersonResourceSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_InsertPersonResourceSell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).InsertPersonResourceSell(ctx, req.(*InsertPersonResourceSellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_DeleteCheckCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCheckCreditsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).DeleteCheckCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_DeleteCheckCredits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).DeleteCheckCredits(ctx, req.(*DeleteCheckCreditsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_DeleteCheckTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCheckTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).DeleteCheckTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_DeleteCheckTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).DeleteCheckTickets(ctx, req.(*DeleteCheckTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_DeletePersonById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).DeletePersonById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_DeletePersonById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).DeletePersonById(ctx, req.(*DeletePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_RequestPartnerPhysicalPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerPhysicalPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).RequestPartnerPhysicalPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_RequestPartnerPhysicalPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).RequestPartnerPhysicalPerson(ctx, req.(*PartnerPhysicalPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonRPC_GetClaimsFromTokenBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenBenefit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonRPCServer).GetClaimsFromTokenBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonRPC_GetClaimsFromTokenBenefit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonRPCServer).GetClaimsFromTokenBenefit(ctx, req.(*TokenBenefit))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonRPC_ServiceDesc is the grpc.ServiceDesc for PersonRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microservice.registrations.registrations_person.PersonRPC",
	HandlerType: (*PersonRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindByFilter",
			Handler:    _PersonRPC_FindByFilter_Handler,
		},
		{
			MethodName: "FindByBenefit",
			Handler:    _PersonRPC_FindByBenefit_Handler,
		},
		{
			MethodName: "FindElderlyByCpf",
			Handler:    _PersonRPC_FindElderlyByCpf_Handler,
		},
		{
			MethodName: "FetchElderlyByCpf",
			Handler:    _PersonRPC_FetchElderlyByCpf_Handler,
		},
		{
			MethodName: "CreatePersonNotWebUser",
			Handler:    _PersonRPC_CreatePersonNotWebUser_Handler,
		},
		{
			MethodName: "CreatePersonByBenefit",
			Handler:    _PersonRPC_CreatePersonByBenefit_Handler,
		},
		{
			MethodName: "UpdatePersonByBenefit",
			Handler:    _PersonRPC_UpdatePersonByBenefit_Handler,
		},
		{
			MethodName: "CreateRegistration",
			Handler:    _PersonRPC_CreateRegistration_Handler,
		},
		{
			MethodName: "CreateFidelityRegister",
			Handler:    _PersonRPC_CreateFidelityRegister_Handler,
		},
		{
			MethodName: "UpdateRegistration",
			Handler:    _PersonRPC_UpdateRegistration_Handler,
		},
		{
			MethodName: "ConfirmLinkRequestRegistration",
			Handler:    _PersonRPC_ConfirmLinkRequestRegistration_Handler,
		},
		{
			MethodName: "ValidateUnification",
			Handler:    _PersonRPC_ValidateUnification_Handler,
		},
		{
			MethodName: "LoginByEmailAndPwd",
			Handler:    _PersonRPC_LoginByEmailAndPwd_Handler,
		},
		{
			MethodName: "CheckLoginExists",
			Handler:    _PersonRPC_CheckLoginExists_Handler,
		},
		{
			MethodName: "RequestPasswordRecovery",
			Handler:    _PersonRPC_RequestPasswordRecovery_Handler,
		},
		{
			MethodName: "RequestPasswordRecoverySSO",
			Handler:    _PersonRPC_RequestPasswordRecoverySSO_Handler,
		},
		{
			MethodName: "ConfirmPasswordRecovery",
			Handler:    _PersonRPC_ConfirmPasswordRecovery_Handler,
		},
		{
			MethodName: "RequestChangeEmail",
			Handler:    _PersonRPC_RequestChangeEmail_Handler,
		},
		{
			MethodName: "ConfirmChangeEmail",
			Handler:    _PersonRPC_ConfirmChangeEmail_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _PersonRPC_ChangePassword_Handler,
		},
		{
			MethodName: "CreateYoungPersonByPersonID",
			Handler:    _PersonRPC_CreateYoungPersonByPersonID_Handler,
		},
		{
			MethodName: "UpdateYoungPersonByPersonID",
			Handler:    _PersonRPC_UpdateYoungPersonByPersonID_Handler,
		},
		{
			MethodName: "DeleteYoungPersonByPersonID",
			Handler:    _PersonRPC_DeleteYoungPersonByPersonID_Handler,
		},
		{
			MethodName: "FetchYoungPerson",
			Handler:    _PersonRPC_FetchYoungPerson_Handler,
		},
		{
			MethodName: "CreateYoungPerson",
			Handler:    _PersonRPC_CreateYoungPerson_Handler,
		},
		{
			MethodName: "CreateElderlyPersonByPersonID",
			Handler:    _PersonRPC_CreateElderlyPersonByPersonID_Handler,
		},
		{
			MethodName: "UpdateElderlyPersonByPersonID",
			Handler:    _PersonRPC_UpdateElderlyPersonByPersonID_Handler,
		},
		{
			MethodName: "DeleteElderlyPersonByPersonID",
			Handler:    _PersonRPC_DeleteElderlyPersonByPersonID_Handler,
		},
		{
			MethodName: "CreateElderlyPerson",
			Handler:    _PersonRPC_CreateElderlyPerson_Handler,
		},
		{
			MethodName: "CreateStudentPersonByPersonID",
			Handler:    _PersonRPC_CreateStudentPersonByPersonID_Handler,
		},
		{
			MethodName: "UpdateStudentPersonByPersonID",
			Handler:    _PersonRPC_UpdateStudentPersonByPersonID_Handler,
		},
		{
			MethodName: "DeleteStudentPersonByPersonID",
			Handler:    _PersonRPC_DeleteStudentPersonByPersonID_Handler,
		},
		{
			MethodName: "CreatePassPersonByPersonID",
			Handler:    _PersonRPC_CreatePassPersonByPersonID_Handler,
		},
		{
			MethodName: "UpdatePassPersonByPersonID",
			Handler:    _PersonRPC_UpdatePassPersonByPersonID_Handler,
		},
		{
			MethodName: "DeletePassPersonByPersonID",
			Handler:    _PersonRPC_DeletePassPersonByPersonID_Handler,
		},
		{
			MethodName: "DeletePassPersonSectionalByID",
			Handler:    _PersonRPC_DeletePassPersonSectionalByID_Handler,
		},
		{
			MethodName: "DeletePassPersonSituationByID",
			Handler:    _PersonRPC_DeletePassPersonSituationByID_Handler,
		},
		{
			MethodName: "DeletePassPersonValidityByID",
			Handler:    _PersonRPC_DeletePassPersonValidityByID_Handler,
		},
		{
			MethodName: "DeletePassPersonUfByID",
			Handler:    _PersonRPC_DeletePassPersonUfByID_Handler,
		},
		{
			MethodName: "DeletePassPersonCategoryByID",
			Handler:    _PersonRPC_DeletePassPersonCategoryByID_Handler,
		},
		{
			MethodName: "FetchPassPerson",
			Handler:    _PersonRPC_FetchPassPerson_Handler,
		},
		{
			MethodName: "CreatePassPerson",
			Handler:    _PersonRPC_CreatePassPerson_Handler,
		},
		{
			MethodName: "RefreshTokenSSO",
			Handler:    _PersonRPC_RefreshTokenSSO_Handler,
		},
		{
			MethodName: "ValidatePersonSSO",
			Handler:    _PersonRPC_ValidatePersonSSO_Handler,
		},
		{
			MethodName: "SaveUserResource",
			Handler:    _PersonRPC_SaveUserResource_Handler,
		},
		{
			MethodName: "PersonHasResource",
			Handler:    _PersonRPC_PersonHasResource_Handler,
		},
		{
			MethodName: "InsertPersonResourceSell",
			Handler:    _PersonRPC_InsertPersonResourceSell_Handler,
		},
		{
			MethodName: "DeleteCheckCredits",
			Handler:    _PersonRPC_DeleteCheckCredits_Handler,
		},
		{
			MethodName: "DeleteCheckTickets",
			Handler:    _PersonRPC_DeleteCheckTickets_Handler,
		},
		{
			MethodName: "DeletePersonById",
			Handler:    _PersonRPC_DeletePersonById_Handler,
		},
		{
			MethodName: "RequestPartnerPhysicalPerson",
			Handler:    _PersonRPC_RequestPartnerPhysicalPerson_Handler,
		},
		{
			MethodName: "GetClaimsFromTokenBenefit",
			Handler:    _PersonRPC_GetClaimsFromTokenBenefit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registrations_person.proto",
}
