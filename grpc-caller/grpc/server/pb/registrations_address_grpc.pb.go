// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: registrations_address.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AddressRPC_FindByFilter_FullMethodName = "/microservice.registrations.address.AddressRPC/FindByFilter"
	AddressRPC_Create_FullMethodName       = "/microservice.registrations.address.AddressRPC/Create"
	AddressRPC_Update_FullMethodName       = "/microservice.registrations.address.AddressRPC/Update"
	AddressRPC_Delete_FullMethodName       = "/microservice.registrations.address.AddressRPC/Delete"
)

// AddressRPCClient is the client API for AddressRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressRPCClient interface {
	FindByFilter(ctx context.Context, in *AddressFilterRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	Create(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddressResponse, error)
	Update(ctx context.Context, in *Address, opts ...grpc.CallOption) (*ResponseDefault, error)
	Delete(ctx context.Context, in *AddressDeleteRequest, opts ...grpc.CallOption) (*ResponseDefault, error)
}

type addressRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressRPCClient(cc grpc.ClientConnInterface) AddressRPCClient {
	return &addressRPCClient{cc}
}

func (c *addressRPCClient) FindByFilter(ctx context.Context, in *AddressFilterRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, AddressRPC_FindByFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressRPCClient) Create(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddressResponse, error) {
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, AddressRPC_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressRPCClient) Update(ctx context.Context, in *Address, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, AddressRPC_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressRPCClient) Delete(ctx context.Context, in *AddressDeleteRequest, opts ...grpc.CallOption) (*ResponseDefault, error) {
	out := new(ResponseDefault)
	err := c.cc.Invoke(ctx, AddressRPC_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressRPCServer is the server API for AddressRPC service.
// All implementations must embed UnimplementedAddressRPCServer
// for forward compatibility
type AddressRPCServer interface {
	FindByFilter(context.Context, *AddressFilterRequest) (*AddressResponse, error)
	Create(context.Context, *Address) (*AddressResponse, error)
	Update(context.Context, *Address) (*ResponseDefault, error)
	Delete(context.Context, *AddressDeleteRequest) (*ResponseDefault, error)
	mustEmbedUnimplementedAddressRPCServer()
}

// UnimplementedAddressRPCServer must be embedded to have forward compatible implementations.
type UnimplementedAddressRPCServer struct {
}

func (UnimplementedAddressRPCServer) FindByFilter(context.Context, *AddressFilterRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByFilter not implemented")
}
func (UnimplementedAddressRPCServer) Create(context.Context, *Address) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAddressRPCServer) Update(context.Context, *Address) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAddressRPCServer) Delete(context.Context, *AddressDeleteRequest) (*ResponseDefault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAddressRPCServer) mustEmbedUnimplementedAddressRPCServer() {}

// UnsafeAddressRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressRPCServer will
// result in compilation errors.
type UnsafeAddressRPCServer interface {
	mustEmbedUnimplementedAddressRPCServer()
}

func RegisterAddressRPCServer(s grpc.ServiceRegistrar, srv AddressRPCServer) {
	s.RegisterService(&AddressRPC_ServiceDesc, srv)
}

func _AddressRPC_FindByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressRPCServer).FindByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressRPC_FindByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressRPCServer).FindByFilter(ctx, req.(*AddressFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressRPC_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressRPCServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressRPC_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressRPCServer).Create(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressRPC_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressRPCServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressRPC_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressRPCServer).Update(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressRPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressRPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressRPC_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressRPCServer).Delete(ctx, req.(*AddressDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressRPC_ServiceDesc is the grpc.ServiceDesc for AddressRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microservice.registrations.address.AddressRPC",
	HandlerType: (*AddressRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindByFilter",
			Handler:    _AddressRPC_FindByFilter_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AddressRPC_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AddressRPC_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AddressRPC_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registrations_address.proto",
}
