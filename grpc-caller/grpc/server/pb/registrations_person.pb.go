// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.28.2
// source: registrations_person.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name            string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	BirthDate       string       `protobuf:"bytes,3,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	Cpf             string       `protobuf:"bytes,4,opt,name=cpf,proto3" json:"cpf"`
	Rg              string       `protobuf:"bytes,5,opt,name=rg,proto3" json:"rg"`
	Passport        string       `protobuf:"bytes,6,opt,name=passport,proto3" json:"passport"`
	Ctps            string       `protobuf:"bytes,7,opt,name=ctps,proto3" json:"ctps"`
	Cnh             string       `protobuf:"bytes,8,opt,name=cnh,proto3" json:"cnh"`
	Phone           string       `protobuf:"bytes,9,opt,name=phone,proto3" json:"phone"`
	Mail            string       `protobuf:"bytes,10,opt,name=mail,proto3" json:"mail"`
	Brazilian       string       `protobuf:"bytes,11,opt,name=brazilian,proto3" json:"brazilian"`
	Gender          string       `protobuf:"bytes,12,opt,name=gender,proto3" json:"gender"`
	DocumentType    DocumentType `protobuf:"varint,13,opt,name=document_type,json=documentType,proto3,enum=microservice.registrations.common.DocumentType" json:"document_type"`
	Document        string       `protobuf:"bytes,14,opt,name=document,proto3" json:"document"`
	Password        string       `protobuf:"bytes,15,opt,name=password,proto3" json:"password"`
	ConfirmPassword string       `protobuf:"bytes,16,opt,name=confirm_password,json=confirmPassword,proto3" json:"confirm_password"`
	Uid             string       `protobuf:"bytes,17,opt,name=uid,proto3" json:"uid"`
	Updated         bool         `protobuf:"varint,18,opt,name=updated,proto3" json:"updated"`
	IgnoreAntiraud  bool         `protobuf:"varint,19,opt,name=ignore_antiraud,json=ignoreAntiraud,proto3" json:"ignore_antiraud"`
	Adresses        []*Address   `protobuf:"bytes,20,rep,name=adresses,proto3" json:"adresses"`
	AccessTemporary bool         `protobuf:"varint,21,opt,name=access_temporary,json=accessTemporary,proto3" json:"access_temporary"`
	ActiveWeb       bool         `protobuf:"varint,22,opt,name=active_web,json=activeWeb,proto3" json:"active_web"`
	System          System       `protobuf:"varint,23,opt,name=system,proto3,enum=microservice.registrations.common.System" json:"system"`
	AmbassadorToken string       `protobuf:"bytes,24,opt,name=ambassador_token,json=ambassadorToken,proto3" json:"ambassador_token"`
	FidelityLinkId  string       `protobuf:"bytes,25,opt,name=fidelity_link_id,json=fidelityLinkId,proto3" json:"fidelity_link_id"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{0}
}

func (x *Person) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *Person) GetCpf() string {
	if x != nil {
		return x.Cpf
	}
	return ""
}

func (x *Person) GetRg() string {
	if x != nil {
		return x.Rg
	}
	return ""
}

func (x *Person) GetPassport() string {
	if x != nil {
		return x.Passport
	}
	return ""
}

func (x *Person) GetCtps() string {
	if x != nil {
		return x.Ctps
	}
	return ""
}

func (x *Person) GetCnh() string {
	if x != nil {
		return x.Cnh
	}
	return ""
}

func (x *Person) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Person) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

func (x *Person) GetBrazilian() string {
	if x != nil {
		return x.Brazilian
	}
	return ""
}

func (x *Person) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Person) GetDocumentType() DocumentType {
	if x != nil {
		return x.DocumentType
	}
	return DocumentType_RG
}

func (x *Person) GetDocument() string {
	if x != nil {
		return x.Document
	}
	return ""
}

func (x *Person) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Person) GetConfirmPassword() string {
	if x != nil {
		return x.ConfirmPassword
	}
	return ""
}

func (x *Person) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Person) GetUpdated() bool {
	if x != nil {
		return x.Updated
	}
	return false
}

func (x *Person) GetIgnoreAntiraud() bool {
	if x != nil {
		return x.IgnoreAntiraud
	}
	return false
}

func (x *Person) GetAdresses() []*Address {
	if x != nil {
		return x.Adresses
	}
	return nil
}

func (x *Person) GetAccessTemporary() bool {
	if x != nil {
		return x.AccessTemporary
	}
	return false
}

func (x *Person) GetActiveWeb() bool {
	if x != nil {
		return x.ActiveWeb
	}
	return false
}

func (x *Person) GetSystem() System {
	if x != nil {
		return x.System
	}
	return System_SystemUndefined
}

func (x *Person) GetAmbassadorToken() string {
	if x != nil {
		return x.AmbassadorToken
	}
	return ""
}

func (x *Person) GetFidelityLinkId() string {
	if x != nil {
		return x.FidelityLinkId
	}
	return ""
}

type PersonAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name"`
	FileExt  string `protobuf:"bytes,2,opt,name=file_ext,json=fileExt,proto3" json:"file_ext"`
	File     []byte `protobuf:"bytes,4,opt,name=file,proto3" json:"file"`
}

func (x *PersonAttachment) Reset() {
	*x = PersonAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonAttachment) ProtoMessage() {}

func (x *PersonAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonAttachment.ProtoReflect.Descriptor instead.
func (*PersonAttachment) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{1}
}

func (x *PersonAttachment) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PersonAttachment) GetFileExt() string {
	if x != nil {
		return x.FileExt
	}
	return ""
}

func (x *PersonAttachment) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type PersonElderly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PersonId            int64               `protobuf:"varint,2,opt,name=person_id,json=personId,proto3" json:"person_id"`
	PersonName          string              `protobuf:"bytes,3,opt,name=person_name,json=personName,proto3" json:"person_name"`
	PersonCpf           string              `protobuf:"bytes,4,opt,name=person_cpf,json=personCpf,proto3" json:"person_cpf"`
	PersonBirthdate     string              `protobuf:"bytes,5,opt,name=person_birthdate,json=personBirthdate,proto3" json:"person_birthdate"`
	DocumentNumber      string              `protobuf:"bytes,6,opt,name=document_number,json=documentNumber,proto3" json:"document_number"`
	DocumentType        string              `protobuf:"bytes,7,opt,name=document_type,json=documentType,proto3" json:"document_type"`
	IssuingAgency       string              `protobuf:"bytes,8,opt,name=issuing_agency,json=issuingAgency,proto3" json:"issuing_agency"`
	Institution         string              `protobuf:"bytes,9,opt,name=institution,proto3" json:"institution"`
	IssueFreeElderly    bool                `protobuf:"varint,10,opt,name=issue_free_elderly,json=issueFreeElderly,proto3" json:"issue_free_elderly"`
	ExpiredPass         bool                `protobuf:"varint,11,opt,name=expired_pass,json=expiredPass,proto3" json:"expired_pass"`
	DueDate             string              `protobuf:"bytes,12,opt,name=due_date,json=dueDate,proto3" json:"due_date"`
	Phone               string              `protobuf:"bytes,13,opt,name=phone,proto3" json:"phone"`
	Gender              string              `protobuf:"bytes,14,opt,name=gender,proto3" json:"gender"`
	Key                 string              `protobuf:"bytes,15,opt,name=key,proto3" json:"key"`
	Attachments         []*PersonAttachment `protobuf:"bytes,16,rep,name=attachments,proto3" json:"attachments"`
	Income              float64             `protobuf:"fixed64,17,opt,name=income,proto3" json:"income"`
	Status              StatusType          `protobuf:"varint,18,opt,name=status,proto3,enum=microservice.registrations.common.StatusType" json:"status"`
	BenefitDocument     string              `protobuf:"bytes,19,opt,name=benefit_document,json=benefitDocument,proto3" json:"benefit_document"`
	BenefitDocumentType string              `protobuf:"bytes,20,opt,name=benefit_document_type,json=benefitDocumentType,proto3" json:"benefit_document_type"`
	System              System              `protobuf:"varint,21,opt,name=system,proto3,enum=microservice.registrations.common.System" json:"system"`
}

func (x *PersonElderly) Reset() {
	*x = PersonElderly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonElderly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonElderly) ProtoMessage() {}

func (x *PersonElderly) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonElderly.ProtoReflect.Descriptor instead.
func (*PersonElderly) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{2}
}

func (x *PersonElderly) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersonElderly) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *PersonElderly) GetPersonName() string {
	if x != nil {
		return x.PersonName
	}
	return ""
}

func (x *PersonElderly) GetPersonCpf() string {
	if x != nil {
		return x.PersonCpf
	}
	return ""
}

func (x *PersonElderly) GetPersonBirthdate() string {
	if x != nil {
		return x.PersonBirthdate
	}
	return ""
}

func (x *PersonElderly) GetDocumentNumber() string {
	if x != nil {
		return x.DocumentNumber
	}
	return ""
}

func (x *PersonElderly) GetDocumentType() string {
	if x != nil {
		return x.DocumentType
	}
	return ""
}

func (x *PersonElderly) GetIssuingAgency() string {
	if x != nil {
		return x.IssuingAgency
	}
	return ""
}

func (x *PersonElderly) GetInstitution() string {
	if x != nil {
		return x.Institution
	}
	return ""
}

func (x *PersonElderly) GetIssueFreeElderly() bool {
	if x != nil {
		return x.IssueFreeElderly
	}
	return false
}

func (x *PersonElderly) GetExpiredPass() bool {
	if x != nil {
		return x.ExpiredPass
	}
	return false
}

func (x *PersonElderly) GetDueDate() string {
	if x != nil {
		return x.DueDate
	}
	return ""
}

func (x *PersonElderly) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PersonElderly) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *PersonElderly) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PersonElderly) GetAttachments() []*PersonAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *PersonElderly) GetIncome() float64 {
	if x != nil {
		return x.Income
	}
	return 0
}

func (x *PersonElderly) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_StatusTypeUndefined
}

func (x *PersonElderly) GetBenefitDocument() string {
	if x != nil {
		return x.BenefitDocument
	}
	return ""
}

func (x *PersonElderly) GetBenefitDocumentType() string {
	if x != nil {
		return x.BenefitDocumentType
	}
	return ""
}

func (x *PersonElderly) GetSystem() System {
	if x != nil {
		return x.System
	}
	return System_SystemUndefined
}

type PersonElderlyFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpf         string       `protobuf:"bytes,1,opt,name=cpf,proto3" json:"cpf"`
	BenefitType TypeOfTicket `protobuf:"varint,2,opt,name=benefit_type,json=benefitType,proto3,enum=microservice.registrations.common.TypeOfTicket" json:"benefit_type"`
}

func (x *PersonElderlyFilterRequest) Reset() {
	*x = PersonElderlyFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonElderlyFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonElderlyFilterRequest) ProtoMessage() {}

func (x *PersonElderlyFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonElderlyFilterRequest.ProtoReflect.Descriptor instead.
func (*PersonElderlyFilterRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{3}
}

func (x *PersonElderlyFilterRequest) GetCpf() string {
	if x != nil {
		return x.Cpf
	}
	return ""
}

func (x *PersonElderlyFilterRequest) GetBenefitType() TypeOfTicket {
	if x != nil {
		return x.BenefitType
	}
	return TypeOfTicket_TypeOfTicketUndefined
}

type PersonElderlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassengerElderly *PersonElderly `protobuf:"bytes,1,opt,name=passenger_elderly,json=passengerElderly,proto3" json:"passenger_elderly"`
}

func (x *PersonElderlyResponse) Reset() {
	*x = PersonElderlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonElderlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonElderlyResponse) ProtoMessage() {}

func (x *PersonElderlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonElderlyResponse.ProtoReflect.Descriptor instead.
func (*PersonElderlyResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{4}
}

func (x *PersonElderlyResponse) GetPassengerElderly() *PersonElderly {
	if x != nil {
		return x.PassengerElderly
	}
	return nil
}

type PersonYoung struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PersonId       int64                  `protobuf:"varint,2,opt,name=person_id,json=personId,proto3" json:"person_id"`
	NisNumber      string                 `protobuf:"bytes,3,opt,name=nis_number,json=nisNumber,proto3" json:"nis_number"`
	IssueDate      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=issue_date,json=issueDate,proto3" json:"issue_date"`
	DueDate        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=due_date,json=dueDate,proto3" json:"due_date"`
	Name           string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name"`
	Cpf            string                 `protobuf:"bytes,7,opt,name=cpf,proto3" json:"cpf"`
	Dob            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=dob,proto3" json:"dob"`
	Key            string                 `protobuf:"bytes,9,opt,name=key,proto3" json:"key"`
	ExpiredPass    bool                   `protobuf:"varint,10,opt,name=expired_pass,json=expiredPass,proto3" json:"expired_pass"`
	BenefitType    TypeOfTicket           `protobuf:"varint,11,opt,name=benefit_type,json=benefitType,proto3,enum=microservice.registrations.common.TypeOfTicket" json:"benefit_type"`
	Status         StatusType             `protobuf:"varint,12,opt,name=status,proto3,enum=microservice.registrations.common.StatusType" json:"status"`
	Attachments    []*PersonAttachment    `protobuf:"bytes,13,rep,name=attachments,proto3" json:"attachments"`
	Gender         string                 `protobuf:"bytes,14,opt,name=gender,proto3" json:"gender"`
	Phone          string                 `protobuf:"bytes,15,opt,name=phone,proto3" json:"phone"`
	DocumentNumber string                 `protobuf:"bytes,16,opt,name=document_number,json=documentNumber,proto3" json:"document_number"`
	DocumentType   string                 `protobuf:"bytes,17,opt,name=document_type,json=documentType,proto3" json:"document_type"`
	System         System                 `protobuf:"varint,18,opt,name=system,proto3,enum=microservice.registrations.common.System" json:"system"`
}

func (x *PersonYoung) Reset() {
	*x = PersonYoung{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonYoung) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonYoung) ProtoMessage() {}

func (x *PersonYoung) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonYoung.ProtoReflect.Descriptor instead.
func (*PersonYoung) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{5}
}

func (x *PersonYoung) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersonYoung) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *PersonYoung) GetNisNumber() string {
	if x != nil {
		return x.NisNumber
	}
	return ""
}

func (x *PersonYoung) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *PersonYoung) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *PersonYoung) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PersonYoung) GetCpf() string {
	if x != nil {
		return x.Cpf
	}
	return ""
}

func (x *PersonYoung) GetDob() *timestamppb.Timestamp {
	if x != nil {
		return x.Dob
	}
	return nil
}

func (x *PersonYoung) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PersonYoung) GetExpiredPass() bool {
	if x != nil {
		return x.ExpiredPass
	}
	return false
}

func (x *PersonYoung) GetBenefitType() TypeOfTicket {
	if x != nil {
		return x.BenefitType
	}
	return TypeOfTicket_TypeOfTicketUndefined
}

func (x *PersonYoung) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_StatusTypeUndefined
}

func (x *PersonYoung) GetAttachments() []*PersonAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *PersonYoung) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *PersonYoung) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PersonYoung) GetDocumentNumber() string {
	if x != nil {
		return x.DocumentNumber
	}
	return ""
}

func (x *PersonYoung) GetDocumentType() string {
	if x != nil {
		return x.DocumentType
	}
	return ""
}

func (x *PersonYoung) GetSystem() System {
	if x != nil {
		return x.System
	}
	return System_SystemUndefined
}

type PersonYoungResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonYoung []*PersonYoung `protobuf:"bytes,1,rep,name=person_young,json=personYoung,proto3" json:"person_young"`
}

func (x *PersonYoungResponse) Reset() {
	*x = PersonYoungResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonYoungResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonYoungResponse) ProtoMessage() {}

func (x *PersonYoungResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonYoungResponse.ProtoReflect.Descriptor instead.
func (*PersonYoungResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{6}
}

func (x *PersonYoungResponse) GetPersonYoung() []*PersonYoung {
	if x != nil {
		return x.PersonYoung
	}
	return nil
}

type PersonStudent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PersonId        int64                  `protobuf:"varint,2,opt,name=person_id,json=personId,proto3" json:"person_id"`
	StudentEntityId int64                  `protobuf:"varint,3,opt,name=student_entity_id,json=studentEntityId,proto3" json:"student_entity_id"`
	CieNumber       string                 `protobuf:"bytes,4,opt,name=cie_number,json=cieNumber,proto3" json:"cie_number"`
	IssueDate       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=issue_date,json=issueDate,proto3" json:"issue_date"`
	DueDate         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=due_date,json=dueDate,proto3" json:"due_date"`
}

func (x *PersonStudent) Reset() {
	*x = PersonStudent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonStudent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonStudent) ProtoMessage() {}

func (x *PersonStudent) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonStudent.ProtoReflect.Descriptor instead.
func (*PersonStudent) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{7}
}

func (x *PersonStudent) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersonStudent) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *PersonStudent) GetStudentEntityId() int64 {
	if x != nil {
		return x.StudentEntityId
	}
	return 0
}

func (x *PersonStudent) GetCieNumber() string {
	if x != nil {
		return x.CieNumber
	}
	return ""
}

func (x *PersonStudent) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *PersonStudent) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

type PersonPass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PersonInstitutionId    int64                  `protobuf:"varint,2,opt,name=person_institution_id,json=personInstitutionId,proto3" json:"person_institution_id"`
	PersonBeneficiaryId    int64                  `protobuf:"varint,3,opt,name=person_beneficiary_id,json=personBeneficiaryId,proto3" json:"person_beneficiary_id"`
	IssueDate              *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=issue_date,json=issueDate,proto3" json:"issue_date"`
	Number                 string                 `protobuf:"bytes,5,opt,name=number,proto3" json:"number"`
	Type                   PersonPassType         `protobuf:"varint,6,opt,name=type,proto3,enum=microservice.registrations.common.PersonPassType" json:"type"`
	Confirmed              bool                   `protobuf:"varint,7,opt,name=confirmed,proto3" json:"confirmed"`
	Obs                    string                 `protobuf:"bytes,8,opt,name=obs,proto3" json:"obs"`
	EscortRequired         bool                   `protobuf:"varint,9,opt,name=escort_required,json=escortRequired,proto3" json:"escort_required"`
	MobilityReduced        bool                   `protobuf:"varint,10,opt,name=mobility_reduced,json=mobilityReduced,proto3" json:"mobility_reduced"`
	NeedBoardingAssistance bool                   `protobuf:"varint,11,opt,name=need_boarding_assistance,json=needBoardingAssistance,proto3" json:"need_boarding_assistance"`
	BoardingAssistanceType int64                  `protobuf:"varint,12,opt,name=boarding_assistance_type,json=boardingAssistanceType,proto3" json:"boarding_assistance_type"`
	Categories             []*PersonPassCategory  `protobuf:"bytes,13,rep,name=categories,proto3" json:"categories"`
	Sectionals             []*PersonPassSectional `protobuf:"bytes,14,rep,name=sectionals,proto3" json:"sectionals"`
	States                 []*PersonPassState     `protobuf:"bytes,15,rep,name=states,proto3" json:"states"`
	Validity               []*PersonPassValidity  `protobuf:"bytes,16,rep,name=validity,proto3" json:"validity"`
	Situations             []*PersonPassSituation `protobuf:"bytes,17,rep,name=situations,proto3" json:"situations"`
	Cpf                    string                 `protobuf:"bytes,18,opt,name=cpf,proto3" json:"cpf"`
	Name                   string                 `protobuf:"bytes,19,opt,name=name,proto3" json:"name"`
	Dob                    *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=dob,proto3" json:"dob"`
	Jurisdiction           Jurisdiction           `protobuf:"varint,21,opt,name=jurisdiction,proto3,enum=microservice.registrations.common.Jurisdiction" json:"jurisdiction"`
	Key                    string                 `protobuf:"bytes,22,opt,name=key,proto3" json:"key"`
	ExpiredPass            bool                   `protobuf:"varint,23,opt,name=expired_pass,json=expiredPass,proto3" json:"expired_pass"`
	Status                 StatusType             `protobuf:"varint,24,opt,name=status,proto3,enum=microservice.registrations.common.StatusType" json:"status"`
	Attachments            []*PersonAttachment    `protobuf:"bytes,25,rep,name=attachments,proto3" json:"attachments"`
	Gender                 string                 `protobuf:"bytes,26,opt,name=gender,proto3" json:"gender"`
	Phone                  string                 `protobuf:"bytes,27,opt,name=phone,proto3" json:"phone"`
	DocumentNumber         string                 `protobuf:"bytes,28,opt,name=document_number,json=documentNumber,proto3" json:"document_number"`
	DocumentType           string                 `protobuf:"bytes,29,opt,name=document_type,json=documentType,proto3" json:"document_type"`
	DigitalFreePass        bool                   `protobuf:"varint,30,opt,name=digital_free_pass,json=digitalFreePass,proto3" json:"digital_free_pass"`
	System                 System                 `protobuf:"varint,31,opt,name=system,proto3,enum=microservice.registrations.common.System" json:"system"`
}

func (x *PersonPass) Reset() {
	*x = PersonPass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonPass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonPass) ProtoMessage() {}

func (x *PersonPass) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonPass.ProtoReflect.Descriptor instead.
func (*PersonPass) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{8}
}

func (x *PersonPass) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersonPass) GetPersonInstitutionId() int64 {
	if x != nil {
		return x.PersonInstitutionId
	}
	return 0
}

func (x *PersonPass) GetPersonBeneficiaryId() int64 {
	if x != nil {
		return x.PersonBeneficiaryId
	}
	return 0
}

func (x *PersonPass) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *PersonPass) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *PersonPass) GetType() PersonPassType {
	if x != nil {
		return x.Type
	}
	return PersonPassType_PersonPassUndefined
}

func (x *PersonPass) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *PersonPass) GetObs() string {
	if x != nil {
		return x.Obs
	}
	return ""
}

func (x *PersonPass) GetEscortRequired() bool {
	if x != nil {
		return x.EscortRequired
	}
	return false
}

func (x *PersonPass) GetMobilityReduced() bool {
	if x != nil {
		return x.MobilityReduced
	}
	return false
}

func (x *PersonPass) GetNeedBoardingAssistance() bool {
	if x != nil {
		return x.NeedBoardingAssistance
	}
	return false
}

func (x *PersonPass) GetBoardingAssistanceType() int64 {
	if x != nil {
		return x.BoardingAssistanceType
	}
	return 0
}

func (x *PersonPass) GetCategories() []*PersonPassCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *PersonPass) GetSectionals() []*PersonPassSectional {
	if x != nil {
		return x.Sectionals
	}
	return nil
}

func (x *PersonPass) GetStates() []*PersonPassState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *PersonPass) GetValidity() []*PersonPassValidity {
	if x != nil {
		return x.Validity
	}
	return nil
}

func (x *PersonPass) GetSituations() []*PersonPassSituation {
	if x != nil {
		return x.Situations
	}
	return nil
}

func (x *PersonPass) GetCpf() string {
	if x != nil {
		return x.Cpf
	}
	return ""
}

func (x *PersonPass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PersonPass) GetDob() *timestamppb.Timestamp {
	if x != nil {
		return x.Dob
	}
	return nil
}

func (x *PersonPass) GetJurisdiction() Jurisdiction {
	if x != nil {
		return x.Jurisdiction
	}
	return Jurisdiction_JurisdictionUndefined
}

func (x *PersonPass) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PersonPass) GetExpiredPass() bool {
	if x != nil {
		return x.ExpiredPass
	}
	return false
}

func (x *PersonPass) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_StatusTypeUndefined
}

func (x *PersonPass) GetAttachments() []*PersonAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *PersonPass) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *PersonPass) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PersonPass) GetDocumentNumber() string {
	if x != nil {
		return x.DocumentNumber
	}
	return ""
}

func (x *PersonPass) GetDocumentType() string {
	if x != nil {
		return x.DocumentType
	}
	return ""
}

func (x *PersonPass) GetDigitalFreePass() bool {
	if x != nil {
		return x.DigitalFreePass
	}
	return false
}

func (x *PersonPass) GetSystem() System {
	if x != nil {
		return x.System
	}
	return System_SystemUndefined
}

type PersonPassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonPass []*PersonPass `protobuf:"bytes,1,rep,name=person_pass,json=personPass,proto3" json:"person_pass"`
}

func (x *PersonPassResponse) Reset() {
	*x = PersonPassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonPassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonPassResponse) ProtoMessage() {}

func (x *PersonPassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonPassResponse.ProtoReflect.Descriptor instead.
func (*PersonPassResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{9}
}

func (x *PersonPassResponse) GetPersonPass() []*PersonPass {
	if x != nil {
		return x.PersonPass
	}
	return nil
}

type PersonPassCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PassId        int64 `protobuf:"varint,2,opt,name=pass_id,json=passId,proto3" json:"pass_id"`
	VehicleTypeId int64 `protobuf:"varint,3,opt,name=vehicle_type_id,json=vehicleTypeId,proto3" json:"vehicle_type_id"`
}

func (x *PersonPassCategory) Reset() {
	*x = PersonPassCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonPassCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonPassCategory) ProtoMessage() {}

func (x *PersonPassCategory) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonPassCategory.ProtoReflect.Descriptor instead.
func (*PersonPassCategory) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{10}
}

func (x *PersonPassCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersonPassCategory) GetPassId() int64 {
	if x != nil {
		return x.PassId
	}
	return 0
}

func (x *PersonPassCategory) GetVehicleTypeId() int64 {
	if x != nil {
		return x.VehicleTypeId
	}
	return 0
}

type PersonPassSectional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PassId      int64 `protobuf:"varint,2,opt,name=pass_id,json=passId,proto3" json:"pass_id"`
	SectionalId int64 `protobuf:"varint,3,opt,name=sectional_id,json=sectionalId,proto3" json:"sectional_id"`
}

func (x *PersonPassSectional) Reset() {
	*x = PersonPassSectional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonPassSectional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonPassSectional) ProtoMessage() {}

func (x *PersonPassSectional) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonPassSectional.ProtoReflect.Descriptor instead.
func (*PersonPassSectional) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{11}
}

func (x *PersonPassSectional) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersonPassSectional) GetPassId() int64 {
	if x != nil {
		return x.PassId
	}
	return 0
}

func (x *PersonPassSectional) GetSectionalId() int64 {
	if x != nil {
		return x.SectionalId
	}
	return 0
}

type PersonPassState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PassId  int64 `protobuf:"varint,2,opt,name=pass_id,json=passId,proto3" json:"pass_id"`
	StateId int64 `protobuf:"varint,3,opt,name=state_id,json=stateId,proto3" json:"state_id"`
}

func (x *PersonPassState) Reset() {
	*x = PersonPassState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonPassState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonPassState) ProtoMessage() {}

func (x *PersonPassState) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonPassState.ProtoReflect.Descriptor instead.
func (*PersonPassState) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{12}
}

func (x *PersonPassState) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersonPassState) GetPassId() int64 {
	if x != nil {
		return x.PassId
	}
	return 0
}

func (x *PersonPassState) GetStateId() int64 {
	if x != nil {
		return x.StateId
	}
	return 0
}

type PersonPassValidity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PassId        int64                  `protobuf:"varint,2,opt,name=pass_id,json=passId,proto3" json:"pass_id"`
	ValidityId    int64                  `protobuf:"varint,3,opt,name=validity_id,json=validityId,proto3" json:"validity_id"`
	ValidityBegin *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=validity_begin,json=validityBegin,proto3" json:"validity_begin"`
	ValidityEnd   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=validity_end,json=validityEnd,proto3" json:"validity_end"`
}

func (x *PersonPassValidity) Reset() {
	*x = PersonPassValidity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonPassValidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonPassValidity) ProtoMessage() {}

func (x *PersonPassValidity) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonPassValidity.ProtoReflect.Descriptor instead.
func (*PersonPassValidity) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{13}
}

func (x *PersonPassValidity) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersonPassValidity) GetPassId() int64 {
	if x != nil {
		return x.PassId
	}
	return 0
}

func (x *PersonPassValidity) GetValidityId() int64 {
	if x != nil {
		return x.ValidityId
	}
	return 0
}

func (x *PersonPassValidity) GetValidityBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidityBegin
	}
	return nil
}

func (x *PersonPassValidity) GetValidityEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidityEnd
	}
	return nil
}

type PersonPassSituation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	UserId       int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id"`
	PersonPassId int64                  `protobuf:"varint,3,opt,name=person_pass_id,json=personPassId,proto3" json:"person_pass_id"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	Situation    StatusType             `protobuf:"varint,5,opt,name=situation,proto3,enum=microservice.registrations.common.StatusType" json:"situation"`
	Observation  string                 `protobuf:"bytes,6,opt,name=observation,proto3" json:"observation"`
}

func (x *PersonPassSituation) Reset() {
	*x = PersonPassSituation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonPassSituation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonPassSituation) ProtoMessage() {}

func (x *PersonPassSituation) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonPassSituation.ProtoReflect.Descriptor instead.
func (*PersonPassSituation) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{14}
}

func (x *PersonPassSituation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersonPassSituation) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PersonPassSituation) GetPersonPassId() int64 {
	if x != nil {
		return x.PersonPassId
	}
	return 0
}

func (x *PersonPassSituation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PersonPassSituation) GetSituation() StatusType {
	if x != nil {
		return x.Situation
	}
	return StatusType_StatusTypeUndefined
}

func (x *PersonPassSituation) GetObservation() string {
	if x != nil {
		return x.Observation
	}
	return ""
}

type PersonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  string    `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	Person []*Person `protobuf:"bytes,2,rep,name=person,proto3" json:"person"`
}

func (x *PersonResponse) Reset() {
	*x = PersonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonResponse) ProtoMessage() {}

func (x *PersonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonResponse.ProtoReflect.Descriptor instead.
func (*PersonResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{15}
}

func (x *PersonResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PersonResponse) GetPerson() []*Person {
	if x != nil {
		return x.Person
	}
	return nil
}

type LoginPersonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email             string `protobuf:"bytes,1,opt,name=email,proto3" json:"email"`
	Password          string `protobuf:"bytes,2,opt,name=password,proto3" json:"password"`
	Uid               string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid"`
	Sso               bool   `protobuf:"varint,4,opt,name=sso,proto3" json:"sso"`
	ReceivePromotions bool   `protobuf:"varint,5,opt,name=receive_promotions,json=receivePromotions,proto3" json:"receive_promotions"`
	Cpf               string `protobuf:"bytes,6,opt,name=cpf,proto3" json:"cpf"`
	System            System `protobuf:"varint,7,opt,name=system,proto3,enum=microservice.registrations.common.System" json:"system"`
}

func (x *LoginPersonRequest) Reset() {
	*x = LoginPersonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginPersonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginPersonRequest) ProtoMessage() {}

func (x *LoginPersonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginPersonRequest.ProtoReflect.Descriptor instead.
func (*LoginPersonRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{16}
}

func (x *LoginPersonRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginPersonRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginPersonRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *LoginPersonRequest) GetSso() bool {
	if x != nil {
		return x.Sso
	}
	return false
}

func (x *LoginPersonRequest) GetReceivePromotions() bool {
	if x != nil {
		return x.ReceivePromotions
	}
	return false
}

func (x *LoginPersonRequest) GetCpf() string {
	if x != nil {
		return x.Cpf
	}
	return ""
}

func (x *LoginPersonRequest) GetSystem() System {
	if x != nil {
		return x.System
	}
	return System_SystemUndefined
}

type Campaign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateUpdateByQrcode bool   `protobuf:"varint,1,opt,name=create_update_by_qrcode,json=createUpdateByQrcode,proto3" json:"create_update_by_qrcode"`
	FidelityAmbassadorId string `protobuf:"bytes,2,opt,name=fidelity_ambassador_id,json=fidelityAmbassadorId,proto3" json:"fidelity_ambassador_id"`
}

func (x *Campaign) Reset() {
	*x = Campaign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Campaign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Campaign) ProtoMessage() {}

func (x *Campaign) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Campaign.ProtoReflect.Descriptor instead.
func (*Campaign) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{17}
}

func (x *Campaign) GetCreateUpdateByQrcode() bool {
	if x != nil {
		return x.CreateUpdateByQrcode
	}
	return false
}

func (x *Campaign) GetFidelityAmbassadorId() string {
	if x != nil {
		return x.FidelityAmbassadorId
	}
	return ""
}

type RequestRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrlSiteConfirm string    `protobuf:"bytes,1,opt,name=url_site_confirm,json=urlSiteConfirm,proto3" json:"url_site_confirm"`
	Person         *Person   `protobuf:"bytes,2,opt,name=person,proto3" json:"person"`
	Campaign       *Campaign `protobuf:"bytes,3,opt,name=campaign,proto3" json:"campaign"`
	System         System    `protobuf:"varint,4,opt,name=system,proto3,enum=microservice.registrations.common.System" json:"system"`
}

func (x *RequestRegistration) Reset() {
	*x = RequestRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRegistration) ProtoMessage() {}

func (x *RequestRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRegistration.ProtoReflect.Descriptor instead.
func (*RequestRegistration) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{18}
}

func (x *RequestRegistration) GetUrlSiteConfirm() string {
	if x != nil {
		return x.UrlSiteConfirm
	}
	return ""
}

func (x *RequestRegistration) GetPerson() *Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *RequestRegistration) GetCampaign() *Campaign {
	if x != nil {
		return x.Campaign
	}
	return nil
}

func (x *RequestRegistration) GetSystem() System {
	if x != nil {
		return x.System
	}
	return System_SystemUndefined
}

type CreateFidelity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FidelityToken string `protobuf:"bytes,1,opt,name=fidelity_token,json=fidelityToken,proto3" json:"fidelity_token"`
}

func (x *CreateFidelity) Reset() {
	*x = CreateFidelity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFidelity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFidelity) ProtoMessage() {}

func (x *CreateFidelity) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFidelity.ProtoReflect.Descriptor instead.
func (*CreateFidelity) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{19}
}

func (x *CreateFidelity) GetFidelityToken() string {
	if x != nil {
		return x.FidelityToken
	}
	return ""
}

type RegistrationPersonNotWebUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Person *Person `protobuf:"bytes,1,opt,name=person,proto3" json:"person"`
}

func (x *RegistrationPersonNotWebUser) Reset() {
	*x = RegistrationPersonNotWebUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationPersonNotWebUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationPersonNotWebUser) ProtoMessage() {}

func (x *RegistrationPersonNotWebUser) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationPersonNotWebUser.ProtoReflect.Descriptor instead.
func (*RegistrationPersonNotWebUser) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{20}
}

func (x *RegistrationPersonNotWebUser) GetPerson() *Person {
	if x != nil {
		return x.Person
	}
	return nil
}

type RequestRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error       string         `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	Message     string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	SocialMedia bool           `protobuf:"varint,3,opt,name=social_media,json=socialMedia,proto3" json:"social_media"`
	Validations []*Validations `protobuf:"bytes,4,rep,name=validations,proto3" json:"validations"`
}

func (x *RequestRegistrationResponse) Reset() {
	*x = RequestRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRegistrationResponse) ProtoMessage() {}

func (x *RequestRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRegistrationResponse.ProtoReflect.Descriptor instead.
func (*RequestRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{21}
}

func (x *RequestRegistrationResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RequestRegistrationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RequestRegistrationResponse) GetSocialMedia() bool {
	if x != nil {
		return x.SocialMedia
	}
	return false
}

func (x *RequestRegistrationResponse) GetValidations() []*Validations {
	if x != nil {
		return x.Validations
	}
	return nil
}

type Validations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (x *Validations) Reset() {
	*x = Validations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validations) ProtoMessage() {}

func (x *Validations) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validations.ProtoReflect.Descriptor instead.
func (*Validations) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{22}
}

func (x *Validations) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Validations) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RequestRecoverPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email               string      `protobuf:"bytes,1,opt,name=email,proto3" json:"email"`
	UrlSiteConfirm      string      `protobuf:"bytes,2,opt,name=url_site_confirm,json=urlSiteConfirm,proto3" json:"url_site_confirm"`
	Cpf                 string      `protobuf:"bytes,3,opt,name=cpf,proto3" json:"cpf"`
	RecaptchaToken      string      `protobuf:"bytes,4,opt,name=recaptcha_token,json=recaptchaToken,proto3" json:"recaptcha_token"`
	UpdateMailParameter *UpdateMail `protobuf:"bytes,5,opt,name=update_mail_parameter,json=updateMailParameter,proto3" json:"update_mail_parameter"`
}

func (x *RequestRecoverPassword) Reset() {
	*x = RequestRecoverPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRecoverPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRecoverPassword) ProtoMessage() {}

func (x *RequestRecoverPassword) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRecoverPassword.ProtoReflect.Descriptor instead.
func (*RequestRecoverPassword) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{23}
}

func (x *RequestRecoverPassword) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RequestRecoverPassword) GetUrlSiteConfirm() string {
	if x != nil {
		return x.UrlSiteConfirm
	}
	return ""
}

func (x *RequestRecoverPassword) GetCpf() string {
	if x != nil {
		return x.Cpf
	}
	return ""
}

func (x *RequestRecoverPassword) GetRecaptchaToken() string {
	if x != nil {
		return x.RecaptchaToken
	}
	return ""
}

func (x *RequestRecoverPassword) GetUpdateMailParameter() *UpdateMail {
	if x != nil {
		return x.UpdateMailParameter
	}
	return nil
}

type RequestRecoverPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      string `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	UpdateMail bool   `protobuf:"varint,3,opt,name=update_mail,json=updateMail,proto3" json:"update_mail"`
}

func (x *RequestRecoverPasswordResponse) Reset() {
	*x = RequestRecoverPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRecoverPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRecoverPasswordResponse) ProtoMessage() {}

func (x *RequestRecoverPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRecoverPasswordResponse.ProtoReflect.Descriptor instead.
func (*RequestRecoverPasswordResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{24}
}

func (x *RequestRecoverPasswordResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RequestRecoverPasswordResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RequestRecoverPasswordResponse) GetUpdateMail() bool {
	if x != nil {
		return x.UpdateMail
	}
	return false
}

type UpdateMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mail      string `protobuf:"bytes,1,opt,name=mail,proto3" json:"mail"`
	BirthDate string `protobuf:"bytes,2,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
}

func (x *UpdateMail) Reset() {
	*x = UpdateMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMail) ProtoMessage() {}

func (x *UpdateMail) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMail.ProtoReflect.Descriptor instead.
func (*UpdateMail) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateMail) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

func (x *UpdateMail) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

type ConfirmRecoverPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token              string `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	NewPassword        string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password"`
	ConfirmNewPassword string `protobuf:"bytes,3,opt,name=confirm_new_password,json=confirmNewPassword,proto3" json:"confirm_new_password"`
}

func (x *ConfirmRecoverPasswordRequest) Reset() {
	*x = ConfirmRecoverPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmRecoverPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRecoverPasswordRequest) ProtoMessage() {}

func (x *ConfirmRecoverPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRecoverPasswordRequest.ProtoReflect.Descriptor instead.
func (*ConfirmRecoverPasswordRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{26}
}

func (x *ConfirmRecoverPasswordRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConfirmRecoverPasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *ConfirmRecoverPasswordRequest) GetConfirmNewPassword() string {
	if x != nil {
		return x.ConfirmNewPassword
	}
	return ""
}

type ChangeEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId       int64  `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id"`
	NewEmail       string `protobuf:"bytes,2,opt,name=new_email,json=newEmail,proto3" json:"new_email"`
	UrlSiteConfirm string `protobuf:"bytes,3,opt,name=url_site_confirm,json=urlSiteConfirm,proto3" json:"url_site_confirm"`
	PersonName     string `protobuf:"bytes,4,opt,name=person_name,json=personName,proto3" json:"person_name"`
}

func (x *ChangeEmail) Reset() {
	*x = ChangeEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEmail) ProtoMessage() {}

func (x *ChangeEmail) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEmail.ProtoReflect.Descriptor instead.
func (*ChangeEmail) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{27}
}

func (x *ChangeEmail) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *ChangeEmail) GetNewEmail() string {
	if x != nil {
		return x.NewEmail
	}
	return ""
}

func (x *ChangeEmail) GetUrlSiteConfirm() string {
	if x != nil {
		return x.UrlSiteConfirm
	}
	return ""
}

func (x *ChangeEmail) GetPersonName() string {
	if x != nil {
		return x.PersonName
	}
	return ""
}

type ChangePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId           int64  `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id"`
	OldPassword        string `protobuf:"bytes,2,opt,name=old_password,json=oldPassword,proto3" json:"old_password"`
	NewPassword        string `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password"`
	ConfirmNewPassword string `protobuf:"bytes,4,opt,name=confirm_new_password,json=confirmNewPassword,proto3" json:"confirm_new_password"`
	PasswordTemporary  bool   `protobuf:"varint,5,opt,name=password_temporary,json=passwordTemporary,proto3" json:"password_temporary"`
}

func (x *ChangePasswordRequest) Reset() {
	*x = ChangePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordRequest) ProtoMessage() {}

func (x *ChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{28}
}

func (x *ChangePasswordRequest) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *ChangePasswordRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ChangePasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *ChangePasswordRequest) GetConfirmNewPassword() string {
	if x != nil {
		return x.ConfirmNewPassword
	}
	return ""
}

func (x *ChangePasswordRequest) GetPasswordTemporary() bool {
	if x != nil {
		return x.PasswordTemporary
	}
	return false
}

type ValidateUnificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document string `protobuf:"bytes,1,opt,name=document,proto3" json:"document"`
	Field    string `protobuf:"bytes,2,opt,name=field,proto3" json:"field"`
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value"`
}

func (x *ValidateUnificationRequest) Reset() {
	*x = ValidateUnificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateUnificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateUnificationRequest) ProtoMessage() {}

func (x *ValidateUnificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateUnificationRequest.ProtoReflect.Descriptor instead.
func (*ValidateUnificationRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{29}
}

func (x *ValidateUnificationRequest) GetDocument() string {
	if x != nil {
		return x.Document
	}
	return ""
}

func (x *ValidateUnificationRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ValidateUnificationRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ConfirmLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	System System `protobuf:"varint,2,opt,name=system,proto3,enum=microservice.registrations.common.System" json:"system"`
}

func (x *ConfirmLinkRequest) Reset() {
	*x = ConfirmLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmLinkRequest) ProtoMessage() {}

func (x *ConfirmLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmLinkRequest.ProtoReflect.Descriptor instead.
func (*ConfirmLinkRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{30}
}

func (x *ConfirmLinkRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConfirmLinkRequest) GetSystem() System {
	if x != nil {
		return x.System
	}
	return System_SystemUndefined
}

type ConfirmLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Campaign *Campaign `protobuf:"bytes,1,opt,name=campaign,proto3" json:"campaign"`
	Error    string    `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	Message  string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
}

func (x *ConfirmLinkResponse) Reset() {
	*x = ConfirmLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmLinkResponse) ProtoMessage() {}

func (x *ConfirmLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmLinkResponse.ProtoReflect.Descriptor instead.
func (*ConfirmLinkResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{31}
}

func (x *ConfirmLinkResponse) GetCampaign() *Campaign {
	if x != nil {
		return x.Campaign
	}
	return nil
}

func (x *ConfirmLinkResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ConfirmLinkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FindByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId        int64        `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id"`
	Cpf             string       `protobuf:"bytes,2,opt,name=cpf,proto3" json:"cpf"`
	Email           string       `protobuf:"bytes,3,opt,name=email,proto3" json:"email"`
	ActiveWeb       string       `protobuf:"bytes,4,opt,name=active_web,json=activeWeb,proto3" json:"active_web"`
	Password        string       `protobuf:"bytes,5,opt,name=password,proto3" json:"password"`
	Uid             string       `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid"`
	Passport        string       `protobuf:"bytes,7,opt,name=passport,proto3" json:"passport"`
	Brazilian       string       `protobuf:"bytes,8,opt,name=brazilian,proto3" json:"brazilian"`
	Document        string       `protobuf:"bytes,9,opt,name=document,proto3" json:"document"`
	Unification     bool         `protobuf:"varint,10,opt,name=unification,proto3" json:"unification"`
	UseCache        bool         `protobuf:"varint,11,opt,name=use_cache,json=useCache,proto3" json:"use_cache"`
	ShowAddress     bool         `protobuf:"varint,12,opt,name=show_address,json=showAddress,proto3" json:"show_address"`
	BenefitType     TypeOfTicket `protobuf:"varint,13,opt,name=benefit_type,json=benefitType,proto3,enum=microservice.registrations.common.TypeOfTicket" json:"benefit_type"`
	BenefitNumber   string       `protobuf:"bytes,14,opt,name=benefit_number,json=benefitNumber,proto3" json:"benefit_number"`
	DigitalFreePass bool         `protobuf:"varint,15,opt,name=digital_free_pass,json=digitalFreePass,proto3" json:"digital_free_pass"`
}

func (x *FindByFilterRequest) Reset() {
	*x = FindByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByFilterRequest) ProtoMessage() {}

func (x *FindByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByFilterRequest.ProtoReflect.Descriptor instead.
func (*FindByFilterRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{32}
}

func (x *FindByFilterRequest) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *FindByFilterRequest) GetCpf() string {
	if x != nil {
		return x.Cpf
	}
	return ""
}

func (x *FindByFilterRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *FindByFilterRequest) GetActiveWeb() string {
	if x != nil {
		return x.ActiveWeb
	}
	return ""
}

func (x *FindByFilterRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *FindByFilterRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *FindByFilterRequest) GetPassport() string {
	if x != nil {
		return x.Passport
	}
	return ""
}

func (x *FindByFilterRequest) GetBrazilian() string {
	if x != nil {
		return x.Brazilian
	}
	return ""
}

func (x *FindByFilterRequest) GetDocument() string {
	if x != nil {
		return x.Document
	}
	return ""
}

func (x *FindByFilterRequest) GetUnification() bool {
	if x != nil {
		return x.Unification
	}
	return false
}

func (x *FindByFilterRequest) GetUseCache() bool {
	if x != nil {
		return x.UseCache
	}
	return false
}

func (x *FindByFilterRequest) GetShowAddress() bool {
	if x != nil {
		return x.ShowAddress
	}
	return false
}

func (x *FindByFilterRequest) GetBenefitType() TypeOfTicket {
	if x != nil {
		return x.BenefitType
	}
	return TypeOfTicket_TypeOfTicketUndefined
}

func (x *FindByFilterRequest) GetBenefitNumber() string {
	if x != nil {
		return x.BenefitNumber
	}
	return ""
}

func (x *FindByFilterRequest) GetDigitalFreePass() bool {
	if x != nil {
		return x.DigitalFreePass
	}
	return false
}

type FindByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   string    `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	Persons []*Person `protobuf:"bytes,2,rep,name=persons,proto3" json:"persons"`
}

func (x *FindByFilterResponse) Reset() {
	*x = FindByFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByFilterResponse) ProtoMessage() {}

func (x *FindByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByFilterResponse.ProtoReflect.Descriptor instead.
func (*FindByFilterResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{33}
}

func (x *FindByFilterResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FindByFilterResponse) GetPersons() []*Person {
	if x != nil {
		return x.Persons
	}
	return nil
}

type FindByBenefitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error       string           `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	Elderlies   []*PersonElderly `protobuf:"bytes,2,rep,name=elderlies,proto3" json:"elderlies"`
	PersonPass  []*PersonPass    `protobuf:"bytes,3,rep,name=person_pass,json=personPass,proto3" json:"person_pass"`
	Youngs      []*PersonYoung   `protobuf:"bytes,4,rep,name=youngs,proto3" json:"youngs"`
	BenefitType TypeOfTicket     `protobuf:"varint,5,opt,name=benefit_type,json=benefitType,proto3,enum=microservice.registrations.common.TypeOfTicket" json:"benefit_type"`
}

func (x *FindByBenefitResponse) Reset() {
	*x = FindByBenefitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindByBenefitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByBenefitResponse) ProtoMessage() {}

func (x *FindByBenefitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByBenefitResponse.ProtoReflect.Descriptor instead.
func (*FindByBenefitResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{34}
}

func (x *FindByBenefitResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FindByBenefitResponse) GetElderlies() []*PersonElderly {
	if x != nil {
		return x.Elderlies
	}
	return nil
}

func (x *FindByBenefitResponse) GetPersonPass() []*PersonPass {
	if x != nil {
		return x.PersonPass
	}
	return nil
}

func (x *FindByBenefitResponse) GetYoungs() []*PersonYoung {
	if x != nil {
		return x.Youngs
	}
	return nil
}

func (x *FindByBenefitResponse) GetBenefitType() TypeOfTicket {
	if x != nil {
		return x.BenefitType
	}
	return TypeOfTicket_TypeOfTicketUndefined
}

type CreatedIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *CreatedIDResponse) Reset() {
	*x = CreatedIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedIDResponse) ProtoMessage() {}

func (x *CreatedIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedIDResponse.ProtoReflect.Descriptor instead.
func (*CreatedIDResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{35}
}

func (x *CreatedIDResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *DeleteIDRequest) Reset() {
	*x = DeleteIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIDRequest) ProtoMessage() {}

func (x *DeleteIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteIDRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeletePersonPassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PersonId int64 `protobuf:"varint,2,opt,name=person_id,json=personId,proto3" json:"person_id"`
}

func (x *DeletePersonPassRequest) Reset() {
	*x = DeletePersonPassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePersonPassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePersonPassRequest) ProtoMessage() {}

func (x *DeletePersonPassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePersonPassRequest.ProtoReflect.Descriptor instead.
func (*DeletePersonPassRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{37}
}

func (x *DeletePersonPassRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeletePersonPassRequest) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

type RefreshTokenSSORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	System System `protobuf:"varint,2,opt,name=system,proto3,enum=microservice.registrations.common.System" json:"system"`
}

func (x *RefreshTokenSSORequest) Reset() {
	*x = RefreshTokenSSORequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenSSORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenSSORequest) ProtoMessage() {}

func (x *RefreshTokenSSORequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenSSORequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenSSORequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{38}
}

func (x *RefreshTokenSSORequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RefreshTokenSSORequest) GetSystem() System {
	if x != nil {
		return x.System
	}
	return System_SystemUndefined
}

type RefreshTokenSSOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        string `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token"`
}

func (x *RefreshTokenSSOResponse) Reset() {
	*x = RefreshTokenSSOResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenSSOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenSSOResponse) ProtoMessage() {}

func (x *RefreshTokenSSOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenSSOResponse.ProtoReflect.Descriptor instead.
func (*RefreshTokenSSOResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{39}
}

func (x *RefreshTokenSSOResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RefreshTokenSSOResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type ValidatePersonSSORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document  string `protobuf:"bytes,1,opt,name=document,proto3" json:"document"`
	Brazilian string `protobuf:"bytes,2,opt,name=brazilian,proto3" json:"brazilian"`
}

func (x *ValidatePersonSSORequest) Reset() {
	*x = ValidatePersonSSORequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatePersonSSORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePersonSSORequest) ProtoMessage() {}

func (x *ValidatePersonSSORequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePersonSSORequest.ProtoReflect.Descriptor instead.
func (*ValidatePersonSSORequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{40}
}

func (x *ValidatePersonSSORequest) GetDocument() string {
	if x != nil {
		return x.Document
	}
	return ""
}

func (x *ValidatePersonSSORequest) GetBrazilian() string {
	if x != nil {
		return x.Brazilian
	}
	return ""
}

type ValidatePersonSSOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists  string  `protobuf:"bytes,1,opt,name=exists,proto3" json:"exists"`
	Persons *Person `protobuf:"bytes,2,opt,name=persons,proto3" json:"persons"`
}

func (x *ValidatePersonSSOResponse) Reset() {
	*x = ValidatePersonSSOResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatePersonSSOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePersonSSOResponse) ProtoMessage() {}

func (x *ValidatePersonSSOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePersonSSOResponse.ProtoReflect.Descriptor instead.
func (*ValidatePersonSSOResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{41}
}

func (x *ValidatePersonSSOResponse) GetExists() string {
	if x != nil {
		return x.Exists
	}
	return ""
}

func (x *ValidatePersonSSOResponse) GetPersons() *Person {
	if x != nil {
		return x.Persons
	}
	return nil
}

type SaveUserResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId"`
}

func (x *SaveUserResourceRequest) Reset() {
	*x = SaveUserResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveUserResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveUserResourceRequest) ProtoMessage() {}

func (x *SaveUserResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveUserResourceRequest.ProtoReflect.Descriptor instead.
func (*SaveUserResourceRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{42}
}

func (x *SaveUserResourceRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SaveUserResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
}

func (x *SaveUserResourceResponse) Reset() {
	*x = SaveUserResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveUserResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveUserResourceResponse) ProtoMessage() {}

func (x *SaveUserResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveUserResourceResponse.ProtoReflect.Descriptor instead.
func (*SaveUserResourceResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{43}
}

func (x *SaveUserResourceResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type PersonHasResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId   int64 `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id"`
	BoardingId int64 `protobuf:"varint,2,opt,name=boarding_id,json=boardingId,proto3" json:"boarding_id"`
	LandingId  int64 `protobuf:"varint,3,opt,name=landing_id,json=landingId,proto3" json:"landing_id"`
}

func (x *PersonHasResourceRequest) Reset() {
	*x = PersonHasResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonHasResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonHasResourceRequest) ProtoMessage() {}

func (x *PersonHasResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonHasResourceRequest.ProtoReflect.Descriptor instead.
func (*PersonHasResourceRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{44}
}

func (x *PersonHasResourceRequest) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *PersonHasResourceRequest) GetBoardingId() int64 {
	if x != nil {
		return x.BoardingId
	}
	return 0
}

func (x *PersonHasResourceRequest) GetLandingId() int64 {
	if x != nil {
		return x.LandingId
	}
	return 0
}

type PersonHasResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error       string `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	HasResource bool   `protobuf:"varint,2,opt,name=hasResource,proto3" json:"hasResource"`
}

func (x *PersonHasResourceResponse) Reset() {
	*x = PersonHasResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonHasResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonHasResourceResponse) ProtoMessage() {}

func (x *PersonHasResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonHasResourceResponse.ProtoReflect.Descriptor instead.
func (*PersonHasResourceResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{45}
}

func (x *PersonHasResourceResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PersonHasResourceResponse) GetHasResource() bool {
	if x != nil {
		return x.HasResource
	}
	return false
}

type InsertPersonResourceSellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId   int64 `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id"`
	SaleId     int64 `protobuf:"varint,2,opt,name=sale_id,json=saleId,proto3" json:"sale_id"`
	OriginId   int64 `protobuf:"varint,3,opt,name=origin_id,json=originId,proto3" json:"origin_id"`
	DestinyId  int64 `protobuf:"varint,4,opt,name=destiny_id,json=destinyId,proto3" json:"destiny_id"`
	BoardingId int64 `protobuf:"varint,5,opt,name=boarding_id,json=boardingId,proto3" json:"boarding_id"`
	LandingId  int64 `protobuf:"varint,6,opt,name=landing_id,json=landingId,proto3" json:"landing_id"`
}

func (x *InsertPersonResourceSellRequest) Reset() {
	*x = InsertPersonResourceSellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertPersonResourceSellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertPersonResourceSellRequest) ProtoMessage() {}

func (x *InsertPersonResourceSellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertPersonResourceSellRequest.ProtoReflect.Descriptor instead.
func (*InsertPersonResourceSellRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{46}
}

func (x *InsertPersonResourceSellRequest) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *InsertPersonResourceSellRequest) GetSaleId() int64 {
	if x != nil {
		return x.SaleId
	}
	return 0
}

func (x *InsertPersonResourceSellRequest) GetOriginId() int64 {
	if x != nil {
		return x.OriginId
	}
	return 0
}

func (x *InsertPersonResourceSellRequest) GetDestinyId() int64 {
	if x != nil {
		return x.DestinyId
	}
	return 0
}

func (x *InsertPersonResourceSellRequest) GetBoardingId() int64 {
	if x != nil {
		return x.BoardingId
	}
	return 0
}

func (x *InsertPersonResourceSellRequest) GetLandingId() int64 {
	if x != nil {
		return x.LandingId
	}
	return 0
}

type InsertPersonResourceSellResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonResourceSellId int64 `protobuf:"varint,1,opt,name=person_resource_sell_id,json=personResourceSellId,proto3" json:"person_resource_sell_id"`
}

func (x *InsertPersonResourceSellResponse) Reset() {
	*x = InsertPersonResourceSellResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertPersonResourceSellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertPersonResourceSellResponse) ProtoMessage() {}

func (x *InsertPersonResourceSellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertPersonResourceSellResponse.ProtoReflect.Descriptor instead.
func (*InsertPersonResourceSellResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{47}
}

func (x *InsertPersonResourceSellResponse) GetPersonResourceSellId() int64 {
	if x != nil {
		return x.PersonResourceSellId
	}
	return 0
}

type DeletePersonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId int64 `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id"`
}

func (x *DeletePersonRequest) Reset() {
	*x = DeletePersonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePersonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePersonRequest) ProtoMessage() {}

func (x *DeletePersonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePersonRequest.ProtoReflect.Descriptor instead.
func (*DeletePersonRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{48}
}

func (x *DeletePersonRequest) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

type DeletePersonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message"`
}

func (x *DeletePersonResponse) Reset() {
	*x = DeletePersonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePersonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePersonResponse) ProtoMessage() {}

func (x *DeletePersonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePersonResponse.ProtoReflect.Descriptor instead.
func (*DeletePersonResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{49}
}

func (x *DeletePersonResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeletePersonResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DeleteCheckCreditsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId int64 `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id"`
}

func (x *DeleteCheckCreditsRequest) Reset() {
	*x = DeleteCheckCreditsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCheckCreditsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCheckCreditsRequest) ProtoMessage() {}

func (x *DeleteCheckCreditsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCheckCreditsRequest.ProtoReflect.Descriptor instead.
func (*DeleteCheckCreditsRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteCheckCreditsRequest) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

type DeleteCheckCreditsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasCredits   bool    `protobuf:"varint,1,opt,name=has_credits,json=hasCredits,proto3" json:"has_credits"`
	Credits      float64 `protobuf:"fixed64,2,opt,name=credits,proto3" json:"credits"`
	Message      string  `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	ErrorMessage string  `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message"`
}

func (x *DeleteCheckCreditsResponse) Reset() {
	*x = DeleteCheckCreditsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCheckCreditsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCheckCreditsResponse) ProtoMessage() {}

func (x *DeleteCheckCreditsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCheckCreditsResponse.ProtoReflect.Descriptor instead.
func (*DeleteCheckCreditsResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteCheckCreditsResponse) GetHasCredits() bool {
	if x != nil {
		return x.HasCredits
	}
	return false
}

func (x *DeleteCheckCreditsResponse) GetCredits() float64 {
	if x != nil {
		return x.Credits
	}
	return 0
}

func (x *DeleteCheckCreditsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteCheckCreditsResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DeleteCheckTicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId int64 `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id"`
}

func (x *DeleteCheckTicketsRequest) Reset() {
	*x = DeleteCheckTicketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCheckTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCheckTicketsRequest) ProtoMessage() {}

func (x *DeleteCheckTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCheckTicketsRequest.ProtoReflect.Descriptor instead.
func (*DeleteCheckTicketsRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteCheckTicketsRequest) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

type DeleteCheckTicketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasTickets   bool   `protobuf:"varint,1,opt,name=has_tickets,json=hasTickets,proto3" json:"has_tickets"`
	Message      string `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message"`
}

func (x *DeleteCheckTicketsResponse) Reset() {
	*x = DeleteCheckTicketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCheckTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCheckTicketsResponse) ProtoMessage() {}

func (x *DeleteCheckTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCheckTicketsResponse.ProtoReflect.Descriptor instead.
func (*DeleteCheckTicketsResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteCheckTicketsResponse) GetHasTickets() bool {
	if x != nil {
		return x.HasTickets
	}
	return false
}

func (x *DeleteCheckTicketsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteCheckTicketsResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type CheckLoginExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mail string `protobuf:"bytes,1,opt,name=mail,proto3" json:"mail"`
	Cpf  string `protobuf:"bytes,2,opt,name=cpf,proto3" json:"cpf"`
}

func (x *CheckLoginExistsRequest) Reset() {
	*x = CheckLoginExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLoginExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLoginExistsRequest) ProtoMessage() {}

func (x *CheckLoginExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLoginExistsRequest.ProtoReflect.Descriptor instead.
func (*CheckLoginExistsRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{54}
}

func (x *CheckLoginExistsRequest) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

func (x *CheckLoginExistsRequest) GetCpf() string {
	if x != nil {
		return x.Cpf
	}
	return ""
}

type CheckLoginExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists"`
}

func (x *CheckLoginExistsResponse) Reset() {
	*x = CheckLoginExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLoginExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLoginExistsResponse) ProtoMessage() {}

func (x *CheckLoginExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLoginExistsResponse.ProtoReflect.Descriptor instead.
func (*CheckLoginExistsResponse) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{55}
}

func (x *CheckLoginExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type TokenBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
}

func (x *TokenBenefit) Reset() {
	*x = TokenBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBenefit) ProtoMessage() {}

func (x *TokenBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBenefit.ProtoReflect.Descriptor instead.
func (*TokenBenefit) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{56}
}

func (x *TokenBenefit) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ResponseClaimsFromTokenBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BenefitId     int64                  `protobuf:"varint,1,opt,name=benefit_id,json=benefitId,proto3" json:"benefit_id"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	PersonId      int64                  `protobuf:"varint,3,opt,name=person_id,json=personId,proto3" json:"person_id"`
	Cpf           string                 `protobuf:"bytes,4,opt,name=cpf,proto3" json:"cpf"`
	DueDate       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=due_date,json=dueDate,proto3" json:"due_date"`
	ConfirmedPass bool                   `protobuf:"varint,6,opt,name=confirmed_pass,json=confirmedPass,proto3" json:"confirmed_pass"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	BenefitType   TypeOfTicket           `protobuf:"varint,8,opt,name=benefit_type,json=benefitType,proto3,enum=microservice.registrations.common.TypeOfTicket" json:"benefit_type"`
}

func (x *ResponseClaimsFromTokenBenefit) Reset() {
	*x = ResponseClaimsFromTokenBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseClaimsFromTokenBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseClaimsFromTokenBenefit) ProtoMessage() {}

func (x *ResponseClaimsFromTokenBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseClaimsFromTokenBenefit.ProtoReflect.Descriptor instead.
func (*ResponseClaimsFromTokenBenefit) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{57}
}

func (x *ResponseClaimsFromTokenBenefit) GetBenefitId() int64 {
	if x != nil {
		return x.BenefitId
	}
	return 0
}

func (x *ResponseClaimsFromTokenBenefit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResponseClaimsFromTokenBenefit) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *ResponseClaimsFromTokenBenefit) GetCpf() string {
	if x != nil {
		return x.Cpf
	}
	return ""
}

func (x *ResponseClaimsFromTokenBenefit) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *ResponseClaimsFromTokenBenefit) GetConfirmedPass() bool {
	if x != nil {
		return x.ConfirmedPass
	}
	return false
}

func (x *ResponseClaimsFromTokenBenefit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ResponseClaimsFromTokenBenefit) GetBenefitType() TypeOfTicket {
	if x != nil {
		return x.BenefitType
	}
	return TypeOfTicket_TypeOfTicketUndefined
}

type PersonByBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elderly     *PersonElderly `protobuf:"bytes,1,opt,name=elderly,proto3" json:"elderly"`
	PersonPass  *PersonPass    `protobuf:"bytes,2,opt,name=person_pass,json=personPass,proto3" json:"person_pass"`
	Young       *PersonYoung   `protobuf:"bytes,3,opt,name=young,proto3" json:"young"`
	BenefitType TypeOfTicket   `protobuf:"varint,4,opt,name=benefit_type,json=benefitType,proto3,enum=microservice.registrations.common.TypeOfTicket" json:"benefit_type"`
}

func (x *PersonByBenefit) Reset() {
	*x = PersonByBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonByBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonByBenefit) ProtoMessage() {}

func (x *PersonByBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonByBenefit.ProtoReflect.Descriptor instead.
func (*PersonByBenefit) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{58}
}

func (x *PersonByBenefit) GetElderly() *PersonElderly {
	if x != nil {
		return x.Elderly
	}
	return nil
}

func (x *PersonByBenefit) GetPersonPass() *PersonPass {
	if x != nil {
		return x.PersonPass
	}
	return nil
}

func (x *PersonByBenefit) GetYoung() *PersonYoung {
	if x != nil {
		return x.Young
	}
	return nil
}

func (x *PersonByBenefit) GetBenefitType() TypeOfTicket {
	if x != nil {
		return x.BenefitType
	}
	return TypeOfTicket_TypeOfTicketUndefined
}

type PartnerPhysicalPersonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonId             int64  `protobuf:"varint,1,opt,name=person_id,json=personId,proto3" json:"person_id"`
	FidelityAmbassadorId string `protobuf:"bytes,2,opt,name=fidelity_ambassador_id,json=fidelityAmbassadorId,proto3" json:"fidelity_ambassador_id"`
}

func (x *PartnerPhysicalPersonRequest) Reset() {
	*x = PartnerPhysicalPersonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registrations_person_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerPhysicalPersonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerPhysicalPersonRequest) ProtoMessage() {}

func (x *PartnerPhysicalPersonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registrations_person_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerPhysicalPersonRequest.ProtoReflect.Descriptor instead.
func (*PartnerPhysicalPersonRequest) Descriptor() ([]byte, []int) {
	return file_registrations_person_proto_rawDescGZIP(), []int{59}
}

func (x *PartnerPhysicalPersonRequest) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *PartnerPhysicalPersonRequest) GetFidelityAmbassadorId() string {
	if x != nil {
		return x.FidelityAmbassadorId
	}
	return ""
}

var File_registrations_person_proto protoreflect.FileDescriptor

var file_registrations_person_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x1a, 0x19, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc8, 0x06, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x70, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x72, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x74, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x74,
	0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x6e, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x72, 0x61, 0x7a, 0x69, 0x6c, 0x69, 0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x7a, 0x69, 0x6c, 0x69, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x72, 0x61, 0x75, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x72, 0x61,
	0x75, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x08, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x65, 0x62, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x65, 0x62, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6d, 0x62, 0x61,
	0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x5e, 0x0a,
	0x10, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xd0, 0x06,
	0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x70, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x70, 0x66, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x65, 0x6c, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x63, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x22, 0x82, 0x01, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x45, 0x6c, 0x64, 0x65, 0x72,
	0x6c, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x70, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70,
	0x66, 0x12, 0x52, 0x0a, 0x0c, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x4f, 0x66, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6b, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6c, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x22, 0x93, 0x06, 0x0a,
	0x0b, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x69, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x69, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x70, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x66,
	0x12, 0x2c, 0x0a, 0x03, 0x64, 0x6f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x64, 0x6f, 0x62, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x4f, 0x66, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x63,
	0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x22, 0x76, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x59, 0x6f, 0x75, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x69, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0xf7, 0x0c, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x62, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6f, 0x62, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x73, 0x63, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6e,
	0x65, 0x65, 0x64, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x63, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x0a,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x0a, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x70, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x66, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x03, 0x64, 0x6f, 0x62, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x64, 0x6f, 0x62, 0x12,
	0x53, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x63, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12, 0x41, 0x0a,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x22, 0x72, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x22, 0x65, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x13, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x55,
	0x0a, 0x0f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x13, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x73, 0x69,
	0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x69,
	0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x0e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x4f, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x73, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x73, 0x73, 0x6f, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x70, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x66,
	0x12, 0x41, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x22, 0x77, 0x0a, 0x08, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12,
	0x35, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x5f, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xaa, 0x02, 0x0a,
	0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x75, 0x72, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x4f,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x08, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x37, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x6f, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x57, 0x65, 0x62, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x4f, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x5e, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x84, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x72,
	0x6c, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x70, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x66, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x61, 0x70, 0x74, 0x63,
	0x68, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x6f, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x69, 0x6c, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x22, 0x3f, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x22, 0x8a, 0x01, 0x0a,
	0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4e, 0x65,
	0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75,
	0x72, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdb,
	0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x22, 0x64, 0x0a, 0x1a,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x6d, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x41,
	0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x86, 0x04, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x65, 0x62, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x7a, 0x69, 0x6c,
	0x69, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x7a, 0x69,
	0x6c, 0x69, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x4f, 0x66, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x46, 0x72, 0x65, 0x65, 0x50, 0x61, 0x73, 0x73, 0x22, 0x7f, 0x0a, 0x14, 0x46, 0x69, 0x6e,
	0x64, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x93, 0x03, 0x0a, 0x15, 0x46,
	0x69, 0x6e, 0x64, 0x42, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5c, 0x0a, 0x09, 0x65, 0x6c,
	0x64, 0x65, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x52, 0x09, 0x65,
	0x6c, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x06, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x59,
	0x6f, 0x75, 0x6e, 0x67, 0x52, 0x06, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x0c,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x23, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x71, 0x0a, 0x16, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x53, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x41, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x22, 0x54, 0x0a, 0x17, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x53, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x54, 0x0a, 0x18, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x53, 0x4f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x7a, 0x69, 0x6c, 0x69, 0x61, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x7a, 0x69, 0x6c, 0x69, 0x61, 0x6e, 0x22,
	0x86, 0x01, 0x0a, 0x19, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x53, 0x53, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x31, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x18, 0x53,
	0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x77, 0x0a,
	0x18, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x48, 0x61, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x68, 0x61, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x1f,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x61, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x22, 0x59, 0x0a, 0x20, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x55, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3f, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x70, 0x66, 0x22, 0x32, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x24, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xef, 0x02,
	0x0a, 0x1e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x70, 0x66, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x62,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xf1, 0x02, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x12, 0x58, 0x0a, 0x07, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x45, 0x6c, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x52, 0x07, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x12, 0x5c, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x05, 0x79,
	0x6f, 0x75, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x52, 0x05, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x12,
	0x52, 0x0a, 0x0c, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x62,
	0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x6d, 0x62, 0x61, 0x73, 0x73,
	0x61, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x32, 0xb7, 0x41, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x50, 0x43, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x44, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x44, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x42, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa9, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x42, 0x79, 0x43, 0x70, 0x66, 0x12, 0x4b, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x6c, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x42, 0x79, 0x43, 0x70, 0x66, 0x12, 0x4b, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x45, 0x6c,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xad, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x57, 0x65, 0x62, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4d, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e,
	0x6f, 0x74, 0x57, 0x65, 0x62, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x42, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9d, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x42, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x40, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x42, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x1a, 0x40, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x22, 0x00, 0x12,
	0x8e, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x42, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x40, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x42, 0x79, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0xaa, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4c, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0xaa,
	0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4c, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xad, 0x01, 0x0a, 0x1e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x13,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x6e, 0x64, 0x50, 0x77, 0x64, 0x12, 0x43, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0xa9, 0x01, 0x0a,
	0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x48, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x12, 0x47, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x31, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0xb8, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x53,
	0x4f, 0x12, 0x47, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x4f, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01,
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x4e, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x87,
	0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x43, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x0e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x46, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0xa1, 0x01, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42,
	0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x1a, 0x42, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3c, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x1a, 0x31, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x94, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x59, 0x6f, 0x75, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x40, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x1a, 0x44, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x59, 0x6f, 0x75,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x59, 0x6f, 0x75, 0x6e, 0x67, 0x1a, 0x3c, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x59,
	0x6f, 0x75, 0x6e, 0x67, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x79,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x1a, 0x42, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94,
	0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x40, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x9f,
	0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x45,
	0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x1a, 0x46, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x45,
	0x6c, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xa5, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x3e, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x1a, 0x42, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3e, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x96, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x40, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x1a, 0x42, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42,
	0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x48, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x12, 0x40, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x40, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x40, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x55, 0x66, 0x42, 0x79, 0x49, 0x44, 0x12, 0x40,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x40, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x95, 0x01,
	0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x12, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x1a, 0x43,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x1a, 0x3b, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x22, 0x00, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x53, 0x4f, 0x12, 0x47, 0x2e, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x53, 0x4f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x53, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xac, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x53, 0x53, 0x4f, 0x12, 0x49, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x53, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4a, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x53, 0x53, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa9,
	0x01, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x48, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xac, 0x01, 0x0a, 0x11, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x49, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc1, 0x01, 0x0a, 0x18, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x50, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaf, 0x01,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x12, 0x4a, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4b, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xaf, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x4a, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x44, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0xad, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x3d,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x1a, 0x4f, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x22, 0x00,
	0x42, 0x3a, 0x5a, 0x38, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x65, 0x75, 0x63, 0x61, 0x74, 0x75, 0x72, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_registrations_person_proto_rawDescOnce sync.Once
	file_registrations_person_proto_rawDescData = file_registrations_person_proto_rawDesc
)

func file_registrations_person_proto_rawDescGZIP() []byte {
	file_registrations_person_proto_rawDescOnce.Do(func() {
		file_registrations_person_proto_rawDescData = protoimpl.X.CompressGZIP(file_registrations_person_proto_rawDescData)
	})
	return file_registrations_person_proto_rawDescData
}

var file_registrations_person_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_registrations_person_proto_goTypes = []interface{}{
	(*Person)(nil),                           // 0: microservice.registrations.registrations_person.Person
	(*PersonAttachment)(nil),                 // 1: microservice.registrations.registrations_person.PersonAttachment
	(*PersonElderly)(nil),                    // 2: microservice.registrations.registrations_person.PersonElderly
	(*PersonElderlyFilterRequest)(nil),       // 3: microservice.registrations.registrations_person.PersonElderlyFilterRequest
	(*PersonElderlyResponse)(nil),            // 4: microservice.registrations.registrations_person.PersonElderlyResponse
	(*PersonYoung)(nil),                      // 5: microservice.registrations.registrations_person.PersonYoung
	(*PersonYoungResponse)(nil),              // 6: microservice.registrations.registrations_person.PersonYoungResponse
	(*PersonStudent)(nil),                    // 7: microservice.registrations.registrations_person.PersonStudent
	(*PersonPass)(nil),                       // 8: microservice.registrations.registrations_person.PersonPass
	(*PersonPassResponse)(nil),               // 9: microservice.registrations.registrations_person.PersonPassResponse
	(*PersonPassCategory)(nil),               // 10: microservice.registrations.registrations_person.PersonPassCategory
	(*PersonPassSectional)(nil),              // 11: microservice.registrations.registrations_person.PersonPassSectional
	(*PersonPassState)(nil),                  // 12: microservice.registrations.registrations_person.PersonPassState
	(*PersonPassValidity)(nil),               // 13: microservice.registrations.registrations_person.PersonPassValidity
	(*PersonPassSituation)(nil),              // 14: microservice.registrations.registrations_person.PersonPassSituation
	(*PersonResponse)(nil),                   // 15: microservice.registrations.registrations_person.PersonResponse
	(*LoginPersonRequest)(nil),               // 16: microservice.registrations.registrations_person.LoginPersonRequest
	(*Campaign)(nil),                         // 17: microservice.registrations.registrations_person.Campaign
	(*RequestRegistration)(nil),              // 18: microservice.registrations.registrations_person.RequestRegistration
	(*CreateFidelity)(nil),                   // 19: microservice.registrations.registrations_person.CreateFidelity
	(*RegistrationPersonNotWebUser)(nil),     // 20: microservice.registrations.registrations_person.RegistrationPersonNotWebUser
	(*RequestRegistrationResponse)(nil),      // 21: microservice.registrations.registrations_person.RequestRegistrationResponse
	(*Validations)(nil),                      // 22: microservice.registrations.registrations_person.Validations
	(*RequestRecoverPassword)(nil),           // 23: microservice.registrations.registrations_person.RequestRecoverPassword
	(*RequestRecoverPasswordResponse)(nil),   // 24: microservice.registrations.registrations_person.RequestRecoverPasswordResponse
	(*UpdateMail)(nil),                       // 25: microservice.registrations.registrations_person.UpdateMail
	(*ConfirmRecoverPasswordRequest)(nil),    // 26: microservice.registrations.registrations_person.ConfirmRecoverPasswordRequest
	(*ChangeEmail)(nil),                      // 27: microservice.registrations.registrations_person.ChangeEmail
	(*ChangePasswordRequest)(nil),            // 28: microservice.registrations.registrations_person.ChangePasswordRequest
	(*ValidateUnificationRequest)(nil),       // 29: microservice.registrations.registrations_person.ValidateUnificationRequest
	(*ConfirmLinkRequest)(nil),               // 30: microservice.registrations.registrations_person.ConfirmLinkRequest
	(*ConfirmLinkResponse)(nil),              // 31: microservice.registrations.registrations_person.ConfirmLinkResponse
	(*FindByFilterRequest)(nil),              // 32: microservice.registrations.registrations_person.FindByFilterRequest
	(*FindByFilterResponse)(nil),             // 33: microservice.registrations.registrations_person.FindByFilterResponse
	(*FindByBenefitResponse)(nil),            // 34: microservice.registrations.registrations_person.FindByBenefitResponse
	(*CreatedIDResponse)(nil),                // 35: microservice.registrations.registrations_person.CreatedIDResponse
	(*DeleteIDRequest)(nil),                  // 36: microservice.registrations.registrations_person.DeleteIDRequest
	(*DeletePersonPassRequest)(nil),          // 37: microservice.registrations.registrations_person.DeletePersonPassRequest
	(*RefreshTokenSSORequest)(nil),           // 38: microservice.registrations.registrations_person.RefreshTokenSSORequest
	(*RefreshTokenSSOResponse)(nil),          // 39: microservice.registrations.registrations_person.RefreshTokenSSOResponse
	(*ValidatePersonSSORequest)(nil),         // 40: microservice.registrations.registrations_person.ValidatePersonSSORequest
	(*ValidatePersonSSOResponse)(nil),        // 41: microservice.registrations.registrations_person.ValidatePersonSSOResponse
	(*SaveUserResourceRequest)(nil),          // 42: microservice.registrations.registrations_person.SaveUserResourceRequest
	(*SaveUserResourceResponse)(nil),         // 43: microservice.registrations.registrations_person.SaveUserResourceResponse
	(*PersonHasResourceRequest)(nil),         // 44: microservice.registrations.registrations_person.PersonHasResourceRequest
	(*PersonHasResourceResponse)(nil),        // 45: microservice.registrations.registrations_person.PersonHasResourceResponse
	(*InsertPersonResourceSellRequest)(nil),  // 46: microservice.registrations.registrations_person.InsertPersonResourceSellRequest
	(*InsertPersonResourceSellResponse)(nil), // 47: microservice.registrations.registrations_person.InsertPersonResourceSellResponse
	(*DeletePersonRequest)(nil),              // 48: microservice.registrations.registrations_person.DeletePersonRequest
	(*DeletePersonResponse)(nil),             // 49: microservice.registrations.registrations_person.DeletePersonResponse
	(*DeleteCheckCreditsRequest)(nil),        // 50: microservice.registrations.registrations_person.DeleteCheckCreditsRequest
	(*DeleteCheckCreditsResponse)(nil),       // 51: microservice.registrations.registrations_person.DeleteCheckCreditsResponse
	(*DeleteCheckTicketsRequest)(nil),        // 52: microservice.registrations.registrations_person.DeleteCheckTicketsRequest
	(*DeleteCheckTicketsResponse)(nil),       // 53: microservice.registrations.registrations_person.DeleteCheckTicketsResponse
	(*CheckLoginExistsRequest)(nil),          // 54: microservice.registrations.registrations_person.CheckLoginExistsRequest
	(*CheckLoginExistsResponse)(nil),         // 55: microservice.registrations.registrations_person.CheckLoginExistsResponse
	(*TokenBenefit)(nil),                     // 56: microservice.registrations.registrations_person.TokenBenefit
	(*ResponseClaimsFromTokenBenefit)(nil),   // 57: microservice.registrations.registrations_person.ResponseClaimsFromTokenBenefit
	(*PersonByBenefit)(nil),                  // 58: microservice.registrations.registrations_person.PersonByBenefit
	(*PartnerPhysicalPersonRequest)(nil),     // 59: microservice.registrations.registrations_person.PartnerPhysicalPersonRequest
	(DocumentType)(0),                        // 60: microservice.registrations.common.DocumentType
	(*Address)(nil),                          // 61: microservice.registrations.address.Address
	(System)(0),                              // 62: microservice.registrations.common.System
	(StatusType)(0),                          // 63: microservice.registrations.common.StatusType
	(TypeOfTicket)(0),                        // 64: microservice.registrations.common.TypeOfTicket
	(*timestamppb.Timestamp)(nil),            // 65: google.protobuf.Timestamp
	(PersonPassType)(0),                      // 66: microservice.registrations.common.PersonPassType
	(Jurisdiction)(0),                        // 67: microservice.registrations.common.Jurisdiction
	(*ResponseDefault)(nil),                  // 68: microservice.registrations.model.ResponseDefault
}
var file_registrations_person_proto_depIdxs = []int32{
	60,  // 0: microservice.registrations.registrations_person.Person.document_type:type_name -> microservice.registrations.common.DocumentType
	61,  // 1: microservice.registrations.registrations_person.Person.adresses:type_name -> microservice.registrations.address.Address
	62,  // 2: microservice.registrations.registrations_person.Person.system:type_name -> microservice.registrations.common.System
	1,   // 3: microservice.registrations.registrations_person.PersonElderly.attachments:type_name -> microservice.registrations.registrations_person.PersonAttachment
	63,  // 4: microservice.registrations.registrations_person.PersonElderly.status:type_name -> microservice.registrations.common.StatusType
	62,  // 5: microservice.registrations.registrations_person.PersonElderly.system:type_name -> microservice.registrations.common.System
	64,  // 6: microservice.registrations.registrations_person.PersonElderlyFilterRequest.benefit_type:type_name -> microservice.registrations.common.TypeOfTicket
	2,   // 7: microservice.registrations.registrations_person.PersonElderlyResponse.passenger_elderly:type_name -> microservice.registrations.registrations_person.PersonElderly
	65,  // 8: microservice.registrations.registrations_person.PersonYoung.issue_date:type_name -> google.protobuf.Timestamp
	65,  // 9: microservice.registrations.registrations_person.PersonYoung.due_date:type_name -> google.protobuf.Timestamp
	65,  // 10: microservice.registrations.registrations_person.PersonYoung.dob:type_name -> google.protobuf.Timestamp
	64,  // 11: microservice.registrations.registrations_person.PersonYoung.benefit_type:type_name -> microservice.registrations.common.TypeOfTicket
	63,  // 12: microservice.registrations.registrations_person.PersonYoung.status:type_name -> microservice.registrations.common.StatusType
	1,   // 13: microservice.registrations.registrations_person.PersonYoung.attachments:type_name -> microservice.registrations.registrations_person.PersonAttachment
	62,  // 14: microservice.registrations.registrations_person.PersonYoung.system:type_name -> microservice.registrations.common.System
	5,   // 15: microservice.registrations.registrations_person.PersonYoungResponse.person_young:type_name -> microservice.registrations.registrations_person.PersonYoung
	65,  // 16: microservice.registrations.registrations_person.PersonStudent.issue_date:type_name -> google.protobuf.Timestamp
	65,  // 17: microservice.registrations.registrations_person.PersonStudent.due_date:type_name -> google.protobuf.Timestamp
	65,  // 18: microservice.registrations.registrations_person.PersonPass.issue_date:type_name -> google.protobuf.Timestamp
	66,  // 19: microservice.registrations.registrations_person.PersonPass.type:type_name -> microservice.registrations.common.PersonPassType
	10,  // 20: microservice.registrations.registrations_person.PersonPass.categories:type_name -> microservice.registrations.registrations_person.PersonPassCategory
	11,  // 21: microservice.registrations.registrations_person.PersonPass.sectionals:type_name -> microservice.registrations.registrations_person.PersonPassSectional
	12,  // 22: microservice.registrations.registrations_person.PersonPass.states:type_name -> microservice.registrations.registrations_person.PersonPassState
	13,  // 23: microservice.registrations.registrations_person.PersonPass.validity:type_name -> microservice.registrations.registrations_person.PersonPassValidity
	14,  // 24: microservice.registrations.registrations_person.PersonPass.situations:type_name -> microservice.registrations.registrations_person.PersonPassSituation
	65,  // 25: microservice.registrations.registrations_person.PersonPass.dob:type_name -> google.protobuf.Timestamp
	67,  // 26: microservice.registrations.registrations_person.PersonPass.jurisdiction:type_name -> microservice.registrations.common.Jurisdiction
	63,  // 27: microservice.registrations.registrations_person.PersonPass.status:type_name -> microservice.registrations.common.StatusType
	1,   // 28: microservice.registrations.registrations_person.PersonPass.attachments:type_name -> microservice.registrations.registrations_person.PersonAttachment
	62,  // 29: microservice.registrations.registrations_person.PersonPass.system:type_name -> microservice.registrations.common.System
	8,   // 30: microservice.registrations.registrations_person.PersonPassResponse.person_pass:type_name -> microservice.registrations.registrations_person.PersonPass
	65,  // 31: microservice.registrations.registrations_person.PersonPassValidity.validity_begin:type_name -> google.protobuf.Timestamp
	65,  // 32: microservice.registrations.registrations_person.PersonPassValidity.validity_end:type_name -> google.protobuf.Timestamp
	65,  // 33: microservice.registrations.registrations_person.PersonPassSituation.created_at:type_name -> google.protobuf.Timestamp
	63,  // 34: microservice.registrations.registrations_person.PersonPassSituation.situation:type_name -> microservice.registrations.common.StatusType
	0,   // 35: microservice.registrations.registrations_person.PersonResponse.person:type_name -> microservice.registrations.registrations_person.Person
	62,  // 36: microservice.registrations.registrations_person.LoginPersonRequest.system:type_name -> microservice.registrations.common.System
	0,   // 37: microservice.registrations.registrations_person.RequestRegistration.person:type_name -> microservice.registrations.registrations_person.Person
	17,  // 38: microservice.registrations.registrations_person.RequestRegistration.campaign:type_name -> microservice.registrations.registrations_person.Campaign
	62,  // 39: microservice.registrations.registrations_person.RequestRegistration.system:type_name -> microservice.registrations.common.System
	0,   // 40: microservice.registrations.registrations_person.RegistrationPersonNotWebUser.person:type_name -> microservice.registrations.registrations_person.Person
	22,  // 41: microservice.registrations.registrations_person.RequestRegistrationResponse.validations:type_name -> microservice.registrations.registrations_person.Validations
	25,  // 42: microservice.registrations.registrations_person.RequestRecoverPassword.update_mail_parameter:type_name -> microservice.registrations.registrations_person.UpdateMail
	62,  // 43: microservice.registrations.registrations_person.ConfirmLinkRequest.system:type_name -> microservice.registrations.common.System
	17,  // 44: microservice.registrations.registrations_person.ConfirmLinkResponse.campaign:type_name -> microservice.registrations.registrations_person.Campaign
	64,  // 45: microservice.registrations.registrations_person.FindByFilterRequest.benefit_type:type_name -> microservice.registrations.common.TypeOfTicket
	0,   // 46: microservice.registrations.registrations_person.FindByFilterResponse.persons:type_name -> microservice.registrations.registrations_person.Person
	2,   // 47: microservice.registrations.registrations_person.FindByBenefitResponse.elderlies:type_name -> microservice.registrations.registrations_person.PersonElderly
	8,   // 48: microservice.registrations.registrations_person.FindByBenefitResponse.person_pass:type_name -> microservice.registrations.registrations_person.PersonPass
	5,   // 49: microservice.registrations.registrations_person.FindByBenefitResponse.youngs:type_name -> microservice.registrations.registrations_person.PersonYoung
	64,  // 50: microservice.registrations.registrations_person.FindByBenefitResponse.benefit_type:type_name -> microservice.registrations.common.TypeOfTicket
	62,  // 51: microservice.registrations.registrations_person.RefreshTokenSSORequest.system:type_name -> microservice.registrations.common.System
	0,   // 52: microservice.registrations.registrations_person.ValidatePersonSSOResponse.persons:type_name -> microservice.registrations.registrations_person.Person
	65,  // 53: microservice.registrations.registrations_person.ResponseClaimsFromTokenBenefit.due_date:type_name -> google.protobuf.Timestamp
	65,  // 54: microservice.registrations.registrations_person.ResponseClaimsFromTokenBenefit.created_at:type_name -> google.protobuf.Timestamp
	64,  // 55: microservice.registrations.registrations_person.ResponseClaimsFromTokenBenefit.benefit_type:type_name -> microservice.registrations.common.TypeOfTicket
	2,   // 56: microservice.registrations.registrations_person.PersonByBenefit.elderly:type_name -> microservice.registrations.registrations_person.PersonElderly
	8,   // 57: microservice.registrations.registrations_person.PersonByBenefit.person_pass:type_name -> microservice.registrations.registrations_person.PersonPass
	5,   // 58: microservice.registrations.registrations_person.PersonByBenefit.young:type_name -> microservice.registrations.registrations_person.PersonYoung
	64,  // 59: microservice.registrations.registrations_person.PersonByBenefit.benefit_type:type_name -> microservice.registrations.common.TypeOfTicket
	32,  // 60: microservice.registrations.registrations_person.PersonRPC.FindByFilter:input_type -> microservice.registrations.registrations_person.FindByFilterRequest
	32,  // 61: microservice.registrations.registrations_person.PersonRPC.FindByBenefit:input_type -> microservice.registrations.registrations_person.FindByFilterRequest
	3,   // 62: microservice.registrations.registrations_person.PersonRPC.FindElderlyByCpf:input_type -> microservice.registrations.registrations_person.PersonElderlyFilterRequest
	3,   // 63: microservice.registrations.registrations_person.PersonRPC.FetchElderlyByCpf:input_type -> microservice.registrations.registrations_person.PersonElderlyFilterRequest
	20,  // 64: microservice.registrations.registrations_person.PersonRPC.CreatePersonNotWebUser:input_type -> microservice.registrations.registrations_person.RegistrationPersonNotWebUser
	58,  // 65: microservice.registrations.registrations_person.PersonRPC.CreatePersonByBenefit:input_type -> microservice.registrations.registrations_person.PersonByBenefit
	58,  // 66: microservice.registrations.registrations_person.PersonRPC.UpdatePersonByBenefit:input_type -> microservice.registrations.registrations_person.PersonByBenefit
	18,  // 67: microservice.registrations.registrations_person.PersonRPC.CreateRegistration:input_type -> microservice.registrations.registrations_person.RequestRegistration
	19,  // 68: microservice.registrations.registrations_person.PersonRPC.CreateFidelityRegister:input_type -> microservice.registrations.registrations_person.CreateFidelity
	18,  // 69: microservice.registrations.registrations_person.PersonRPC.UpdateRegistration:input_type -> microservice.registrations.registrations_person.RequestRegistration
	30,  // 70: microservice.registrations.registrations_person.PersonRPC.ConfirmLinkRequestRegistration:input_type -> microservice.registrations.registrations_person.ConfirmLinkRequest
	29,  // 71: microservice.registrations.registrations_person.PersonRPC.ValidateUnification:input_type -> microservice.registrations.registrations_person.ValidateUnificationRequest
	16,  // 72: microservice.registrations.registrations_person.PersonRPC.LoginByEmailAndPwd:input_type -> microservice.registrations.registrations_person.LoginPersonRequest
	54,  // 73: microservice.registrations.registrations_person.PersonRPC.CheckLoginExists:input_type -> microservice.registrations.registrations_person.CheckLoginExistsRequest
	23,  // 74: microservice.registrations.registrations_person.PersonRPC.RequestPasswordRecovery:input_type -> microservice.registrations.registrations_person.RequestRecoverPassword
	23,  // 75: microservice.registrations.registrations_person.PersonRPC.RequestPasswordRecoverySSO:input_type -> microservice.registrations.registrations_person.RequestRecoverPassword
	26,  // 76: microservice.registrations.registrations_person.PersonRPC.ConfirmPasswordRecovery:input_type -> microservice.registrations.registrations_person.ConfirmRecoverPasswordRequest
	27,  // 77: microservice.registrations.registrations_person.PersonRPC.RequestChangeEmail:input_type -> microservice.registrations.registrations_person.ChangeEmail
	30,  // 78: microservice.registrations.registrations_person.PersonRPC.ConfirmChangeEmail:input_type -> microservice.registrations.registrations_person.ConfirmLinkRequest
	28,  // 79: microservice.registrations.registrations_person.PersonRPC.ChangePassword:input_type -> microservice.registrations.registrations_person.ChangePasswordRequest
	5,   // 80: microservice.registrations.registrations_person.PersonRPC.CreateYoungPersonByPersonID:input_type -> microservice.registrations.registrations_person.PersonYoung
	5,   // 81: microservice.registrations.registrations_person.PersonRPC.UpdateYoungPersonByPersonID:input_type -> microservice.registrations.registrations_person.PersonYoung
	36,  // 82: microservice.registrations.registrations_person.PersonRPC.DeleteYoungPersonByPersonID:input_type -> microservice.registrations.registrations_person.DeleteIDRequest
	5,   // 83: microservice.registrations.registrations_person.PersonRPC.FetchYoungPerson:input_type -> microservice.registrations.registrations_person.PersonYoung
	5,   // 84: microservice.registrations.registrations_person.PersonRPC.CreateYoungPerson:input_type -> microservice.registrations.registrations_person.PersonYoung
	2,   // 85: microservice.registrations.registrations_person.PersonRPC.CreateElderlyPersonByPersonID:input_type -> microservice.registrations.registrations_person.PersonElderly
	2,   // 86: microservice.registrations.registrations_person.PersonRPC.UpdateElderlyPersonByPersonID:input_type -> microservice.registrations.registrations_person.PersonElderly
	36,  // 87: microservice.registrations.registrations_person.PersonRPC.DeleteElderlyPersonByPersonID:input_type -> microservice.registrations.registrations_person.DeleteIDRequest
	2,   // 88: microservice.registrations.registrations_person.PersonRPC.CreateElderlyPerson:input_type -> microservice.registrations.registrations_person.PersonElderly
	7,   // 89: microservice.registrations.registrations_person.PersonRPC.CreateStudentPersonByPersonID:input_type -> microservice.registrations.registrations_person.PersonStudent
	7,   // 90: microservice.registrations.registrations_person.PersonRPC.UpdateStudentPersonByPersonID:input_type -> microservice.registrations.registrations_person.PersonStudent
	36,  // 91: microservice.registrations.registrations_person.PersonRPC.DeleteStudentPersonByPersonID:input_type -> microservice.registrations.registrations_person.DeleteIDRequest
	8,   // 92: microservice.registrations.registrations_person.PersonRPC.CreatePassPersonByPersonID:input_type -> microservice.registrations.registrations_person.PersonPass
	8,   // 93: microservice.registrations.registrations_person.PersonRPC.UpdatePassPersonByPersonID:input_type -> microservice.registrations.registrations_person.PersonPass
	37,  // 94: microservice.registrations.registrations_person.PersonRPC.DeletePassPersonByPersonID:input_type -> microservice.registrations.registrations_person.DeletePersonPassRequest
	36,  // 95: microservice.registrations.registrations_person.PersonRPC.DeletePassPersonSectionalByID:input_type -> microservice.registrations.registrations_person.DeleteIDRequest
	36,  // 96: microservice.registrations.registrations_person.PersonRPC.DeletePassPersonSituationByID:input_type -> microservice.registrations.registrations_person.DeleteIDRequest
	36,  // 97: microservice.registrations.registrations_person.PersonRPC.DeletePassPersonValidityByID:input_type -> microservice.registrations.registrations_person.DeleteIDRequest
	36,  // 98: microservice.registrations.registrations_person.PersonRPC.DeletePassPersonUfByID:input_type -> microservice.registrations.registrations_person.DeleteIDRequest
	36,  // 99: microservice.registrations.registrations_person.PersonRPC.DeletePassPersonCategoryByID:input_type -> microservice.registrations.registrations_person.DeleteIDRequest
	8,   // 100: microservice.registrations.registrations_person.PersonRPC.FetchPassPerson:input_type -> microservice.registrations.registrations_person.PersonPass
	8,   // 101: microservice.registrations.registrations_person.PersonRPC.CreatePassPerson:input_type -> microservice.registrations.registrations_person.PersonPass
	38,  // 102: microservice.registrations.registrations_person.PersonRPC.RefreshTokenSSO:input_type -> microservice.registrations.registrations_person.RefreshTokenSSORequest
	40,  // 103: microservice.registrations.registrations_person.PersonRPC.ValidatePersonSSO:input_type -> microservice.registrations.registrations_person.ValidatePersonSSORequest
	42,  // 104: microservice.registrations.registrations_person.PersonRPC.SaveUserResource:input_type -> microservice.registrations.registrations_person.SaveUserResourceRequest
	44,  // 105: microservice.registrations.registrations_person.PersonRPC.PersonHasResource:input_type -> microservice.registrations.registrations_person.PersonHasResourceRequest
	46,  // 106: microservice.registrations.registrations_person.PersonRPC.InsertPersonResourceSell:input_type -> microservice.registrations.registrations_person.InsertPersonResourceSellRequest
	50,  // 107: microservice.registrations.registrations_person.PersonRPC.DeleteCheckCredits:input_type -> microservice.registrations.registrations_person.DeleteCheckCreditsRequest
	52,  // 108: microservice.registrations.registrations_person.PersonRPC.DeleteCheckTickets:input_type -> microservice.registrations.registrations_person.DeleteCheckTicketsRequest
	48,  // 109: microservice.registrations.registrations_person.PersonRPC.DeletePersonById:input_type -> microservice.registrations.registrations_person.DeletePersonRequest
	59,  // 110: microservice.registrations.registrations_person.PersonRPC.RequestPartnerPhysicalPerson:input_type -> microservice.registrations.registrations_person.PartnerPhysicalPersonRequest
	56,  // 111: microservice.registrations.registrations_person.PersonRPC.GetClaimsFromTokenBenefit:input_type -> microservice.registrations.registrations_person.TokenBenefit
	33,  // 112: microservice.registrations.registrations_person.PersonRPC.FindByFilter:output_type -> microservice.registrations.registrations_person.FindByFilterResponse
	34,  // 113: microservice.registrations.registrations_person.PersonRPC.FindByBenefit:output_type -> microservice.registrations.registrations_person.FindByBenefitResponse
	4,   // 114: microservice.registrations.registrations_person.PersonRPC.FindElderlyByCpf:output_type -> microservice.registrations.registrations_person.PersonElderlyResponse
	4,   // 115: microservice.registrations.registrations_person.PersonRPC.FetchElderlyByCpf:output_type -> microservice.registrations.registrations_person.PersonElderlyResponse
	35,  // 116: microservice.registrations.registrations_person.PersonRPC.CreatePersonNotWebUser:output_type -> microservice.registrations.registrations_person.CreatedIDResponse
	58,  // 117: microservice.registrations.registrations_person.PersonRPC.CreatePersonByBenefit:output_type -> microservice.registrations.registrations_person.PersonByBenefit
	68,  // 118: microservice.registrations.registrations_person.PersonRPC.UpdatePersonByBenefit:output_type -> microservice.registrations.model.ResponseDefault
	21,  // 119: microservice.registrations.registrations_person.PersonRPC.CreateRegistration:output_type -> microservice.registrations.registrations_person.RequestRegistrationResponse
	68,  // 120: microservice.registrations.registrations_person.PersonRPC.CreateFidelityRegister:output_type -> microservice.registrations.model.ResponseDefault
	21,  // 121: microservice.registrations.registrations_person.PersonRPC.UpdateRegistration:output_type -> microservice.registrations.registrations_person.RequestRegistrationResponse
	31,  // 122: microservice.registrations.registrations_person.PersonRPC.ConfirmLinkRequestRegistration:output_type -> microservice.registrations.registrations_person.ConfirmLinkResponse
	68,  // 123: microservice.registrations.registrations_person.PersonRPC.ValidateUnification:output_type -> microservice.registrations.model.ResponseDefault
	0,   // 124: microservice.registrations.registrations_person.PersonRPC.LoginByEmailAndPwd:output_type -> microservice.registrations.registrations_person.Person
	55,  // 125: microservice.registrations.registrations_person.PersonRPC.CheckLoginExists:output_type -> microservice.registrations.registrations_person.CheckLoginExistsResponse
	68,  // 126: microservice.registrations.registrations_person.PersonRPC.RequestPasswordRecovery:output_type -> microservice.registrations.model.ResponseDefault
	24,  // 127: microservice.registrations.registrations_person.PersonRPC.RequestPasswordRecoverySSO:output_type -> microservice.registrations.registrations_person.RequestRecoverPasswordResponse
	68,  // 128: microservice.registrations.registrations_person.PersonRPC.ConfirmPasswordRecovery:output_type -> microservice.registrations.model.ResponseDefault
	68,  // 129: microservice.registrations.registrations_person.PersonRPC.RequestChangeEmail:output_type -> microservice.registrations.model.ResponseDefault
	68,  // 130: microservice.registrations.registrations_person.PersonRPC.ConfirmChangeEmail:output_type -> microservice.registrations.model.ResponseDefault
	68,  // 131: microservice.registrations.registrations_person.PersonRPC.ChangePassword:output_type -> microservice.registrations.model.ResponseDefault
	35,  // 132: microservice.registrations.registrations_person.PersonRPC.CreateYoungPersonByPersonID:output_type -> microservice.registrations.registrations_person.CreatedIDResponse
	68,  // 133: microservice.registrations.registrations_person.PersonRPC.UpdateYoungPersonByPersonID:output_type -> microservice.registrations.model.ResponseDefault
	68,  // 134: microservice.registrations.registrations_person.PersonRPC.DeleteYoungPersonByPersonID:output_type -> microservice.registrations.model.ResponseDefault
	6,   // 135: microservice.registrations.registrations_person.PersonRPC.FetchYoungPerson:output_type -> microservice.registrations.registrations_person.PersonYoungResponse
	5,   // 136: microservice.registrations.registrations_person.PersonRPC.CreateYoungPerson:output_type -> microservice.registrations.registrations_person.PersonYoung
	35,  // 137: microservice.registrations.registrations_person.PersonRPC.CreateElderlyPersonByPersonID:output_type -> microservice.registrations.registrations_person.CreatedIDResponse
	68,  // 138: microservice.registrations.registrations_person.PersonRPC.UpdateElderlyPersonByPersonID:output_type -> microservice.registrations.model.ResponseDefault
	68,  // 139: microservice.registrations.registrations_person.PersonRPC.DeleteElderlyPersonByPersonID:output_type -> microservice.registrations.model.ResponseDefault
	4,   // 140: microservice.registrations.registrations_person.PersonRPC.CreateElderlyPerson:output_type -> microservice.registrations.registrations_person.PersonElderlyResponse
	35,  // 141: microservice.registrations.registrations_person.PersonRPC.CreateStudentPersonByPersonID:output_type -> microservice.registrations.registrations_person.CreatedIDResponse
	68,  // 142: microservice.registrations.registrations_person.PersonRPC.UpdateStudentPersonByPersonID:output_type -> microservice.registrations.model.ResponseDefault
	68,  // 143: microservice.registrations.registrations_person.PersonRPC.DeleteStudentPersonByPersonID:output_type -> microservice.registrations.model.ResponseDefault
	35,  // 144: microservice.registrations.registrations_person.PersonRPC.CreatePassPersonByPersonID:output_type -> microservice.registrations.registrations_person.CreatedIDResponse
	68,  // 145: microservice.registrations.registrations_person.PersonRPC.UpdatePassPersonByPersonID:output_type -> microservice.registrations.model.ResponseDefault
	68,  // 146: microservice.registrations.registrations_person.PersonRPC.DeletePassPersonByPersonID:output_type -> microservice.registrations.model.ResponseDefault
	68,  // 147: microservice.registrations.registrations_person.PersonRPC.DeletePassPersonSectionalByID:output_type -> microservice.registrations.model.ResponseDefault
	68,  // 148: microservice.registrations.registrations_person.PersonRPC.DeletePassPersonSituationByID:output_type -> microservice.registrations.model.ResponseDefault
	68,  // 149: microservice.registrations.registrations_person.PersonRPC.DeletePassPersonValidityByID:output_type -> microservice.registrations.model.ResponseDefault
	68,  // 150: microservice.registrations.registrations_person.PersonRPC.DeletePassPersonUfByID:output_type -> microservice.registrations.model.ResponseDefault
	68,  // 151: microservice.registrations.registrations_person.PersonRPC.DeletePassPersonCategoryByID:output_type -> microservice.registrations.model.ResponseDefault
	9,   // 152: microservice.registrations.registrations_person.PersonRPC.FetchPassPerson:output_type -> microservice.registrations.registrations_person.PersonPassResponse
	8,   // 153: microservice.registrations.registrations_person.PersonRPC.CreatePassPerson:output_type -> microservice.registrations.registrations_person.PersonPass
	39,  // 154: microservice.registrations.registrations_person.PersonRPC.RefreshTokenSSO:output_type -> microservice.registrations.registrations_person.RefreshTokenSSOResponse
	41,  // 155: microservice.registrations.registrations_person.PersonRPC.ValidatePersonSSO:output_type -> microservice.registrations.registrations_person.ValidatePersonSSOResponse
	43,  // 156: microservice.registrations.registrations_person.PersonRPC.SaveUserResource:output_type -> microservice.registrations.registrations_person.SaveUserResourceResponse
	45,  // 157: microservice.registrations.registrations_person.PersonRPC.PersonHasResource:output_type -> microservice.registrations.registrations_person.PersonHasResourceResponse
	47,  // 158: microservice.registrations.registrations_person.PersonRPC.InsertPersonResourceSell:output_type -> microservice.registrations.registrations_person.InsertPersonResourceSellResponse
	51,  // 159: microservice.registrations.registrations_person.PersonRPC.DeleteCheckCredits:output_type -> microservice.registrations.registrations_person.DeleteCheckCreditsResponse
	53,  // 160: microservice.registrations.registrations_person.PersonRPC.DeleteCheckTickets:output_type -> microservice.registrations.registrations_person.DeleteCheckTicketsResponse
	49,  // 161: microservice.registrations.registrations_person.PersonRPC.DeletePersonById:output_type -> microservice.registrations.registrations_person.DeletePersonResponse
	0,   // 162: microservice.registrations.registrations_person.PersonRPC.RequestPartnerPhysicalPerson:output_type -> microservice.registrations.registrations_person.Person
	57,  // 163: microservice.registrations.registrations_person.PersonRPC.GetClaimsFromTokenBenefit:output_type -> microservice.registrations.registrations_person.ResponseClaimsFromTokenBenefit
	112, // [112:164] is the sub-list for method output_type
	60,  // [60:112] is the sub-list for method input_type
	60,  // [60:60] is the sub-list for extension type_name
	60,  // [60:60] is the sub-list for extension extendee
	0,   // [0:60] is the sub-list for field type_name
}

func init() { file_registrations_person_proto_init() }
func file_registrations_person_proto_init() {
	if File_registrations_person_proto != nil {
		return
	}
	file_registrations_model_proto_init()
	file_registrations_address_proto_init()
	file_registrations_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_registrations_person_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonElderly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonElderlyFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonElderlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonYoung); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonYoungResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonStudent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonPass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonPassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonPassCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonPassSectional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonPassState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonPassValidity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonPassSituation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginPersonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Campaign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFidelity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationPersonNotWebUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRecoverPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRecoverPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmRecoverPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateUnificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindByFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindByBenefitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatedIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePersonPassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenSSORequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTokenSSOResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatePersonSSORequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatePersonSSOResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveUserResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveUserResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonHasResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonHasResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertPersonResourceSellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertPersonResourceSellResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePersonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePersonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCheckCreditsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCheckCreditsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCheckTicketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCheckTicketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLoginExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckLoginExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseClaimsFromTokenBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonByBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registrations_person_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerPhysicalPersonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_registrations_person_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_registrations_person_proto_goTypes,
		DependencyIndexes: file_registrations_person_proto_depIdxs,
		MessageInfos:      file_registrations_person_proto_msgTypes,
	}.Build()
	File_registrations_person_proto = out.File
	file_registrations_person_proto_rawDesc = nil
	file_registrations_person_proto_goTypes = nil
	file_registrations_person_proto_depIdxs = nil
}
